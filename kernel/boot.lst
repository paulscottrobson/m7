              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-01-07 09:54:03
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	M7 Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 6189    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800E: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8010: CDA880  			call 	PAGEInitialise
              	
8013: 3E00    			ld 		a,0 								; set Mode 0 (standard 48k Spectrum + Sprites)
8015: CDE980  			call 	GFXMode
              	
8018: 3A6F89  			ld 		a,(BootPage)						; switch to boot page.
801B: CDA880  			call 	PAGEInitialise
801E: DD2A6D89			ld 		ix,(BootAddress)					; start address
8022: 210000  			ld 		hl,0								; zero ABC
8025: 110000  			ld 		de,0
8028: 010000  			ld 		bc,0
802B: DDE9    			jp 		(ix)
              	
802D:         	StopDefault:	
802D: C32D80  			jp 		StopDefault
              	
              			include "support/multiply.asm" 				; 16 bit multiply (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		5th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8030:         	MULTMultiply16:
8030: C5      			push 	bc
8031: D5      			push 	de
8032: 44      			ld 		b,h 							; get multipliers in DE/BC
8033: 4D      			ld 		c,l
8034: 210000  			ld 		hl,0 							; zero total
8037:         	__Core__Mult_Loop:
8037: CB41    			bit 	0,c 							; lsb of shifter is non-zero
8039: 2801    			jr 		z,__Core__Mult_Shift
803B: 19      			add 	hl,de 							; add adder to total
803C:         	__Core__Mult_Shift:
803C: CB38    			srl 	b 								; shift BC right.
803E: CB19    			rr 		c
8040: EB      			ex 		de,hl 							; shift DE left
8041: 29      			add 	hl,hl
8042: EB      			ex 		de,hl
8043: 78      			ld 		a,b 							; loop back if BC is nonzero
8044: B1      			or 		c
8045: 20F0    			jr 		nz,__Core__Mult_Loop
8047: D1      			pop 	de
8048: C1      			pop 	bc
8049: C9      			ret
              	
              			include "support/divide.asm" 				; 16 bit divide (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		5th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
804A:         	DIVDivideMod16:
              	
804A: C5      		push 	bc
804B: 42      		ld 		b,d 				; DE 
804C: 4B      		ld 		c,e
804D: EB      		ex 		de,hl
804E: 210000  		ld 		hl,0
8051: 78      		ld 		a,b
8052: 0608    		ld 		b,8
8054:         	Div16_Loop1:
8054: 17      		rla
8055: ED6A    		adc 	hl,hl
8057: ED52    		sbc 	hl,de
8059: 3001    		jr 		nc,Div16_NoAdd1
805B: 19      		add 	hl,de
805C:         	Div16_NoAdd1:
805C: 10F6    		djnz 	Div16_Loop1
805E: 17      		rla
805F: 2F      		cpl
8060: 47      		ld 		b,a
8061: 79      		ld 		a,c
8062: 48      		ld 		c,b
8063: 0608    		ld 		b,8
8065:         	Div16_Loop2:
8065: 17      		rla
8066: ED6A    		adc 	hl,hl
8068: ED52    		sbc 	hl,de
806A: 3001    		jr 		nc,Div16_NoAdd2
806C: 19      		add 	hl,de
806D:         	Div16_NoAdd2:
806D: 10F6    		djnz 	Div16_Loop2
806F: 17      		rla
8070: 2F      		cpl
8071: 51      		ld 		d,c
8072: 5F      		ld 		e,a
8073: C1      		pop 	bc
8074: C9      		ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		5th January 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8075:         	FARCompileByte:
8075: F5      			push 	af 									; save byte and HL
8076: E5      			push 	hl
8077: F5      			push 	af 									; save byte
8078: 3A6389  			ld		a,(HerePage) 						; switch to page
807B: CDBA80  			call 	PAGESwitch
807E: 2A6189  			ld 		hl,(Here) 							; write to memory location
8081: F1      			pop 	af
8082: 77      			ld 		(hl),a
8083: 23      			inc 	hl 									; bump memory location
8084: 226189  			ld 		(Here),hl 							; write back
8087: CDD380  			call 	PAGERestore
808A: E1      			pop 	hl 									; restore and exit
808B: F1      			pop 	af
808C: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
808D:         	FARCompileWord:
808D: F5      			push 	af 									; save byte and HL
808E: D5      			push 	de
808F: E5      			push 	hl
8090: EB      			ex 		de,hl 								; word into DE
8091: 3A6389  			ld		a,(HerePage) 						; switch to page
8094: CDBA80  			call 	PAGESwitch
8097: 2A6189  			ld 		hl,(Here) 							; write to memory location
809A: 73      			ld 		(hl),e
809B: 23      			inc 	hl 	
809C: 72      			ld 		(hl),d
809D: 23      			inc 	hl
809E: 226189  			ld 		(Here),hl 							; write back
80A1: CDD380  			call 	PAGERestore
80A4: E1      			pop 	hl
80A5: D1      			pop 	de 									; restore and exit
80A6: F1      			pop 	af
80A7: C9      			ret
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		5th January 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
80A8:         	PAGEInitialise:
80A8: E5      			push 	hl
80A9: ED9256  			db 		$ED,$92,$56							; switch to page A
80AC: 3C      			inc 	a
80AD: ED9257  			db 		$ED,$92,$57
80B0: 3D      			dec 	a
80B1: 08      			ex 		af,af' 								; put page in A'
80B2: 218789  			ld 		hl,__PAGEStackBase 					; reset the page stack
80B5: 228589  			ld 		(__PAGEStackPointer),hl
80B8: E1      			pop 	hl
80B9: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
80BA:         	PAGESwitch:
80BA: F5      			push 	af
80BB: E5      			push 	hl
              	
80BC: F5      			push 	af 									; save A on stack
80BD: 2A8589  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
80C0: 08      			ex 		af,af'
80C1: 77      			ld 		(hl),a
80C2: 23      			inc 	hl
80C3: 228589  			ld 		(__PAGEStackPointer),hl
              	
80C6: F1      			pop 	af 									; restore new A
80C7: ED9256  			db 		$ED,$92,$56							; switch to page A
80CA: 3C      			inc 	a
80CB: ED9257  			db 		$ED,$92,$57
80CE: 3D      			dec 	a
80CF: 08      			ex 		af,af' 								; put page in A'
              	
80D0: E1      			pop 	hl
80D1: F1      			pop 	af
80D2: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
80D3:         	PAGERestore:
80D3: F5      			push 	af
80D4: E5      			push 	hl
80D5: 2A8589  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
80D8: 2B      			dec 	hl
80D9: 7E      			ld 		a,(hl)
80DA: 228589  			ld 		(__PAGEStackPointer),hl
80DD: ED9256  			db 		$ED,$92,$56							; switch to page A
80E0: 3C      			inc 	a
80E1: ED9257  			db 		$ED,$92,$57
80E4: 3D      			dec 	a
80E5: 08      			ex 		af,af' 								; update A'
80E6: E1      			pop 	hl
80E7: F1      			pop 	af
80E8: C9      			ret
              					
              			include "console/graphics.asm"				; graphic routines
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80E9:         	GFXMode:
80E9: C5      			push 	bc
80EA: D5      			push 	de
80EB: E5      			push 	hl
80EC: 2D      			dec 	l 									; L = 1 mode layer2
80ED: 2808    			jr 		z,__GFXLayer2
80EF: 2D      			dec 	l
80F0: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
80F2: CD2C82  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
80F5: 1808    			jr 		__GFXConfigure
              	
80F7:         	__GFXLayer2:
80F7: CDA482  			call 	GFXInitialiseLayer2
80FA: 1803    			jr 		__GFXConfigure
              	
80FC:         	__GFXLowRes:
80FC: CD5B83  			call 	GFXInitialiseLowRes
              	
80FF:         	__GFXConfigure:
80FF: 7D      			ld 		a,l 								; save screen size
8100: 327189  			ld 		(SIScreenWidth),a
8103: 7C      			ld 		a,h
8104: 327589  			ld 		(SIScreenHeight),a
8107: EB      			ex 		de,hl 								; save driver
8108: 228389  			ld 		(SIScreenDriver),hl
              	
810B: 6A      			ld 		l,d 								; put sizes in HL DE
810C: 2600    			ld 		h,0
810E: 1600    			ld 		d,0
8110: CD3080  			call 	MULTMultiply16 						; multiply to get size and store.
8113: 227989  			ld 		(SIScreenSize),hl
              	
8116: E1      			pop 	hl
8117: D1      			pop 	de
8118: C1      			pop 	bc
8119: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
811A:         	GFXWriteCharacter:
811A: F5      			push 	af
811B: C5      			push 	bc
811C: D5      			push 	de
811D: E5      			push 	hl
811E: 012881  			ld 		bc,__GFXWCExit
8121: C5      			push 	bc
8122: ED4B8389			ld 		bc,(SIScreenDriver)
8126: C5      			push 	bc
8127: C9      			ret
8128:         	__GFXWCExit:
8128: E1      			pop 	hl
8129: D1      			pop 	de
812A: C1      			pop 	bc
812B: F1      			pop 	af
812C: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
812D:         	GFXWriteHexWord:
812D: 3E05    			ld 		a,5
812F:         	GFXWriteHexWordA:
812F: C5      			push 	bc
8130: D5      			push 	de
8131: E5      			push 	hl
8132: 4F      			ld 		c,a
8133: 7A      			ld 		a,d
8134: D5      			push 	de
8135: CD4181  			call 	__GFXWHByte
8138: D1      			pop 	de
8139: 7B      			ld 		a,e
813A: CD4181  			call	__GFXWHByte
813D: E1      			pop 	hl
813E: D1      			pop 	de
813F: C1      			pop 	bc
8140: C9      			ret
              	
8141:         	__GFXWHByte:
8141: F5      			push 	af
8142: CB0F    			rrc 	a
8144: CB0F    			rrc		a
8146: CB0F    			rrc 	a
8148: CB0F    			rrc 	a
814A: CD4E81  			call 	__GFXWHNibble
814D: F1      			pop 	af
814E:         	__GFXWHNibble:
814E: 51      			ld 		d,c
814F: E60F    			and 	15
8151: FE0A    			cp 		10
8153: 3802    			jr 		c,__GFXWHDigit
8155: C607    			add		a,7
8157:         	__GFXWHDigit:
8157: C630    			add 	a,48
8159: 5F      			ld 		e,a
815A: CD1A81  			call 	GFXWriteCharacter
815D: 23      			inc 	hl
815E: C9      			ret
              			include "console/keyboard.asm"				; keyboard I/O
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		27th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
815F:         	IOScanKeyboard:
815F: C5      			push 	bc
8160: D5      			push 	de
8161: E5      			push 	hl
              	
8162: 21B481  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8165: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8167: 06FE    			ld 		b,$FE
8169: ED78    			in 		a,(c)
816B: CB47    			bit 	0,a
816D: 2005    			jr 		nz,__kr1
816F: 21DC81  			ld 		hl,__kr_shift_table
8172: 180B    			jr 		__kr2
8174:         	__kr1:
8174: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8176: ED78    			in 		a,(c)
8178: CB4F    			bit 	1,a
817A: 2003    			jr 		nz,__kr2
817C: 21DC81  			ld 		hl,__kr_symbol_shift_table
817F:         	__kr2:
              	
817F: 1EFE    			ld 		e,$FE 								; scan pattern.
8181: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
8182: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
8184: FEFE    			cp 		$FE
8186: 2808    			jr 		z,___kr4
8188: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
818A: FE7F    			cp 		$7F
818C: 2802    			jr 		z,___kr4
818E: 161F    			ld 		d,$01F 								; check all bits.
8190:         	___kr4:
8190: 43      			ld 		b,e 								; scan the keyboard
8191: 0EFE    			ld 		c,$FE
8193: ED78    			in 		a,(c)
8195: 2F      			cpl 										; make that active high.
8196: A2      			and 	d  									; and with check value.
8197: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
8199: 23      			inc 	hl 									; next set of keyboard characters
819A: 23      			inc 	hl
819B: 23      			inc 	hl
819C: 23      			inc 	hl
819D: 23      			inc 	hl
              	
819E: 7B      			ld 		a,e 								; get pattern
819F: 87      			add 	a,a 								; shift left
81A0: F601    			or 		1 									; set bit 1.
81A2: 5F      			ld 		e,a
              	
81A3: FEFF    			cp 		$FF 								; finished when all 1's.
81A5: 20DA    			jr 		nz,__kr3 
81A7: AF      			xor 	a
81A8: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
81AA:         	__kr_keypressed:
81AA: 23      			inc 	hl  								; shift right until carry set
81AB: 1F      			rra
81AC: 30FC    			jr 		nc,__kr_keypressed
81AE: 2B      			dec 	hl 									; undo the last inc hl
81AF: 7E      			ld 		a,(hl) 								; get the character number.
81B0:         	__kr_exit:
81B0: E1      			pop 	hl
81B1: D1      			pop 	de
81B2: C1      			pop 	bc
81B3: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
81B4:         	__kr_no_shift_table:
81B4: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
81B8: 76617364	
81BC: 6667    	
81BE: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
81C2: 74313233	
81C6: 3435    	
81C8: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
81CC: 36706F69	
81D0: 7579    	
81D2: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
81D6: 6820006D	
81DA: 6E62    	
              	
81DC:         	__kr_shift_table:
81DC:         	__kr_symbol_shift_table:
81DC: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
81E0: 2F7E7C5C	
81E4: 7B7D    	
81E6: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
81EA: 3E214023	
81EE: 2425    	
81F0: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
81F4: 26223B00	
81F8: 5D5B    	
81FA: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
81FE: 5E20002E	
8202: 2C2A    	
              	
8204: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8208: 2F7E7C5C	
820C: 7B7D    	
820E: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
8212: 3E101112	
8216: 1314    	
8218: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
821C: 15223B00	
8220: 5D5B    	
8222: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8226: 5E20002E	
822A: 2C2A    	
              			include "console/screen48k.asm" 			; drivers
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
822C:         	GFXInitialise48k:
822C: F5      			push 	af 									; save registers
822D: C5      			push 	bc
              	
822E: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8231: 3E00    			ld 		a,0 								; disable Layer 2
8233: ED79    			out 	(c),a
8235: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8239: 210040  			ld 		hl,$4000 							; clear pixel memory
823C: 3600    	__cs1:	ld 		(hl),0
823E: 23      			inc 	hl
823F: 7C      			ld 		a,h
8240: FE58    			cp 		$58
8242: 20F8    			jr 		nz,__cs1
8244: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8246: 23      			inc 	hl
8247: 7C      			ld 		a,h
8248: FE5B    			cp 		$5B
824A: 20F8    			jr 		nz,__cs2	
824C: AF      			xor 	a 									; border off
824D: D3FE    			out 	($FE),a
824F: C1      			pop 	bc
8250: F1      			pop 	af
8251: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
8254: 115882  			ld 		de,GFXPrintCharacter48k
8257: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8258:         	GFXPrintCharacter48k:
8258: F5      			push 	af 									; save registers
8259: C5      			push 	bc
825A: D5      			push 	de
825B: E5      			push 	hl
              	
825C: 43      			ld 		b,e 								; character in B
825D: 7C      			ld 		a,h 								; check range.
825E: FE03    			cp 		3
8260: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8262: E5      			push 	hl 									; save position.
8263: 7C      			ld 		a,h
8264: C658    			add 	$58
8266: 67      			ld 		h,a
              	
8267: 7A      			ld 		a,d 								; get current colour
8268: E607    			and 	7  									; mask 0..2
826A: F640    			or 		$40  								; make bright
826C: 77      			ld 		(hl),a 								; store it.	
826D: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
826E: D5      			push 	de
826F: EB      			ex 		de,hl
8270: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8271: 7A      			ld 		a,d
8272: E603    			and 	3
8274: 87      			add 	a,a
8275: 87      			add 	a,a
8276: 87      			add 	a,a
8277: F640    			or 		$40
8279: 67      			ld 		h,a
827A: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
827B: E5      			push 	hl
827C: 78      			ld 		a,b 								; get character
827D: E67F    			and 	$7F 								; bits 0-6 only.
827F: D620    			sub 	32
8281: 6F      			ld 		l,a 								; put in HL
8282: 2600    			ld 		h,0
8284: 29      			add 	hl,hl 								; x 8
8285: 29      			add 	hl,hl
8286: 29      			add 	hl,hl
8287: ED5B8189			ld 		de,(SIFontBase) 					; add the font base.
828B: 19      			add 	hl,de
828C: EB      			ex 		de,hl 								; put in DE (font address)
828D: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
828E: 78      			ld 		a,b
828F: 0608    			ld 		b,8 								; copy 8 characters
8291: 0E00    			ld 		c,0 								; XOR value 0
8293: CB7F    			bit 	7,a 								; is the character reversed
8295: 2801    			jr 		z,__ZXWCCopy
8297: 0D      			dec 	c 									; C is the XOR mask now $FF
8298:         	__ZXWCCopy:
8298: 1A      			ld 		a,(de)								; get font data
8299: A9      			xor 	c 									; xor with reverse
829A: 77      			ld 		(hl),a 								; write back
829B: 24      			inc 	h 									; bump pointers
829C: 13      			inc 	de
829D: 10F9    			djnz 	__ZXWCCopy 							; do B times.
829F:         	__ZXWCExit:
829F: E1      			pop 	hl 									; restore and exit
82A0: D1      			pop 	de
82A1: C1      			pop 	bc
82A2: F1      			pop 	af
82A3: C9      			ret
              			include "console/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
82A4:         	GFXInitialiseLayer2:
82A4: F5      			push 	af
82A5: C5      			push 	bc
82A6: D5      			push 	de
82A7: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
82AB: 1E02    			ld 		e,2 								; 3 banks to erase
82AD:         	L2PClear:
82AD: 7B      			ld 		a,e 								; put bank number in bits 6/7
82AE: CB0F    			rrc 	a
82B0: CB0F    			rrc 	a
82B2: F603    			or 		2+1 								; shadow on, visible, enable write paging
82B4: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82B7: ED79    			out 	(c),a
82B9: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82BC:         	L2PClearBank: 										; assume default palette :)
82BC: 2B      			dec 	hl
82BD: 3600    			ld 		(hl),$00
82BF: 7C      			ld 		a,h
82C0: B5      			or 		l
82C1: 20F9    			jr		nz,L2PClearBank
82C3: 1D      			dec 	e
82C4: F2AD82  			jp 		p,L2PClear
              	
82C7: AF      			xor 	a
82C8: D3FE    			out 	($FE),a
              	
82CA: D1      			pop 	de
82CB: C1      			pop 	bc
82CC: F1      			pop 	af
82CD: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82D0: 11D482  			ld 		de,GFXPrintCharacterLayer2
82D3: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82D4:         	GFXPrintCharacterLayer2:
82D4: F5      			push 	af
82D5: C5      			push 	bc
82D6: D5      			push 	de
82D7: E5      			push 	hl
82D8: DDE5    			push 	ix
              	
82DA: 43      			ld 		b,e 								; save A temporarily
82DB: 78      			ld 		a,b
82DC: E67F    			and 	$7F
82DE: FE20    			cp 		32
82E0: 3872    			jr 		c,__L2Exit 							; check char in range
82E2: 7C      			ld 		a,h
82E3: FE03    			cp 		3
82E5: 306D    			jr 		nc,__L2Exit 						; check position in range
82E7: 78      			ld 		a,b
              	
82E8: F5      			push 	af 	
82E9: AF      			xor 	a 									; convert colour in C to palette index
82EA: CB42    			bit 	0,d 								; (assumes standard palette)
82EC: 2802    			jr 		z,__L2Not1
82EE: F603    			or 		$03
82F0:         	__L2Not1:
82F0: CB52    			bit 	2,d
82F2: 2802    			jr 		z,__L2Not2
82F4: F61C    			or 		$1C
82F6:         	__L2Not2:
82F6: CB4A    			bit 	1,d
82F8: 2802    			jr 		z,__L2Not3
82FA: F6C0    			or 		$C0
82FC:         	__L2Not3:
82FC: 4F      			ld 		c,a 								; C is foreground
82FD: 0600    			ld 		b,0									; B is xor flipper, initially zero
82FF: F1      			pop 	af 									; restore char
              	
8300: E5      			push 	hl
8301: CB7F    			bit 	7,a 								; adjust background bit on bit 7
8303: 2802    			jr 		z,__L2NotCursor
8305: 06FF    			ld 		b,$FF 								; light grey is cursor
8307:         	__L2NotCursor:
8307: E67F    			and 	$7F 								; offset from space
8309: D620    			sub 	$20
830B: 6F      			ld 		l,a 								; put into HL
830C: 2600    			ld 		h,0
830E: 29      			add 	hl,hl 								; x 8
830F: 29      			add 	hl,hl
8310: 29      			add 	hl,hl
              	
8311: E5      			push 	hl 									; transfer to IX
8312: DDE1    			pop 	ix
8314: E1      			pop 	hl
              	
8315: C5      			push 	bc 									; add the font base to it.
8316: ED4B8189			ld 		bc,(SIFontBase)
831A: DD09    			add 	ix,bc
831C: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
831D: C5      			push 	bc
831E: 7C      			ld  	a,h 								; this is the page number.
831F: CB0F    			rrc 	a
8321: CB0F    			rrc 	a
8323: E6C0    			and 	$C0 								; in bits 6 & 7
8325: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8327: 013B12  			ld 		bc,$123B 							; out to layer 2 port
832A: ED79    			out 	(c),a
832C: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
832D: EB      			ex 		de,hl
832E: 6B      			ld 		l,e
832F: 2600    			ld 		h,0
8331: 29      			add 	hl,hl 								
8332: 29      			add 	hl,hl
8333: 29      			add 	hl,hl
8334: CB24    			sla 	h
8336: CB24    			sla 	h
8338: CB24    			sla 	h
              	
833A: 1E08    			ld 		e,8 								; do 8 rows
833C:         	__L2Outer:
833C: E5      			push 	hl 									; save start
833D: 1608    			ld 		d,8 								; do 8 columns
833F: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8342: A8      			xor 	b 									; maybe flip it ?
8343: DD23    			inc 	ix
8345:         	__L2Loop:
8345: 3600    			ld 		(hl),0 								; background
8347: 87      			add 	a,a 								; shift pattern left
8348: 3001    			jr 		nc,__L2NotSet
834A: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
834B:         	__L2NotSet:
834B: 23      			inc 	hl
834C: 15      			dec 	d 									; do a row
834D: 20F6    			jr 		nz,	__L2Loop
834F: E1      			pop 	hl 									; restore, go 256 bytes down.
8350: 24      			inc 	h
8351: 1D      			dec 	e 									; do 8 rows
8352: 20E8    			jr 		nz,__L2Outer	
8354:         	__L2Exit:
8354: DDE1    			pop 	ix
8356: E1      			pop 	hl
8357: D1      			pop 	de
8358: C1      			pop 	bc
8359: F1      			pop 	af
835A: C9      			ret
              			include "console/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
835B:         	GFXInitialiseLowRes:
835B: F5      			push 	af
835C: C5      			push 	bc
835D: D5      			push 	de
              	
835E: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8362: AF      			xor 	a 									; layer 2 off.
8363: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8366: ED79    			out 	(c),a
              	
8368: 210040  			ld 		hl,$4000 							; erase the bank to $00 
836B: 110060  			ld 		de,$6000
836E:         	LowClearScreen: 									; assume default palette :)
836E: AF      			xor 	a
836F: 77      			ld 		(hl),a
8370: 12      			ld 		(de),a
8371: 23      			inc 	hl
8372: 13      			inc 	de
8373: 7C      			ld 		a,h
8374: FE58    			cp 		$58
8376: 20F6    			jr		nz,LowClearScreen
8378: AF      			xor 	a
8379: D3FE    			out 	($FE),a
837B: D1      			pop 	de
837C: C1      			pop 	bc
837D: F1      			pop 	af
837E: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8381: 118583  			ld 		de,GFXPrintCharacterLowRes
8384: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8385:         	GFXPrintCharacterLowRes:
8385: F5      			push 	af
8386: C5      			push 	bc
8387: D5      			push 	de
8388: E5      			push 	hl
8389: DDE5    			push 	ix
              	
838B: 43      			ld 		b,e 								; save character in B
838C: 7B      			ld 		a,e
838D: E67F    			and 	$7F
838F: FE20    			cp 		32
8391: 3866    			jr 		c,__LPExit
              	
8393: 29      			add 	hl,hl
8394: 29      			add 	hl,hl
8395: 7C      			ld	 	a,h 								; check in range 192*4 = 768
8396: FE03    			cp 		3
8398: 305F    			jr 		nc,__LPExit
              	
839A: 7A      			ld 		a,d 								; only lower 3 bits of colour
839B: E607    			and 	7
839D: 4F      			ld 		c,a 								; C is foreground
              	
839E: E5      			push 	hl
839F: 78      			ld 		a,b 								; get char back
83A0: 0600    			ld 		b,0 								; B = no flip colour.
83A2: CB7F    			bit 	7,a
83A4: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
83A6: 05      			dec 	b
83A7:         	__LowNotReverse:
83A7: E67F    			and 	$7F 								; offset from space
83A9: D620    			sub 	$20
83AB: 6F      			ld 		l,a 								; put into HL
83AC: 2600    			ld 		h,0
83AE: 29      			add 	hl,hl 								; x 8
83AF: 29      			add 	hl,hl
83B0: 29      			add 	hl,hl
              	
83B1: E5      			push 	hl 									; transfer to IX
83B2: DDE1    			pop 	ix
              	
83B4: C5      			push 	bc 									; add the font base to it.
83B5: ED4B8189			ld 		bc,(SIFontBase)
83B9: DD09    			add 	ix,bc
83BB: C1      			pop 	bc
83BC: E1      			pop 	hl
83BD: EB      			ex 		de,hl
83BE: 7B      			ld 		a,e 								; put DE => HL
83BF: E6C0    			and 	192 								; these are part of Y
83C1: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
83C2: 62      			ld 		h,d		
83C3: 29      			add 	hl,hl
83C4: 29      			add 	hl,hl
83C5: 29      			add 	hl,hl
83C6: 29      			add 	hl,hl
83C7: CBF4    			set 	6,h 								; put into $4000 range
              	
83C9: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83CB: A3      			and 	e 									; and with E, gives X position
83CC: 87      			add 	a,a 								; now multiplied by 8.
83CD: 5F      			ld 		e,a 								; DE is x offset.
83CE: 1600    			ld 		d,0  
              	
83D0: 19      			add 	hl,de
83D1: 7C      			ld 		a,h
83D2: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83D4: 3804    			jr 		c,__LowNotLower2
83D6: 110008  			ld 		de,$0800
83D9: 19      			add 	hl,de
83DA:         	__LowNotLower2:
83DA: 1E08    			ld 		e,8 								; do 8 rows
83DC:         	__LowOuter:
83DC: E5      			push 	hl 									; save start
83DD: 1608    			ld 		d,8 								; do 8 columns
83DF: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83E2: A8      			xor 	b
83E3: DD23    			inc 	ix
83E5:         	__LowLoop:
83E5: 3600    			ld 		(hl),0 								; background
83E7: 87      			add 	a,a 								; shift pattern left
83E8: 3001    			jr 		nc,__LowNotSet
83EA: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83EB:         	__LowNotSet:
83EB: 2C      			inc 	l
83EC: 15      			dec 	d 									; do a row
83ED: 20F6    			jr 		nz,	__LowLoop
83EF: E1      			pop 	hl 									; restore, go 256 bytes down.
83F0: D5      			push 	de
83F1: 118000  			ld 		de,128
83F4: 19      			add 	hl,de
83F5: D1      			pop 	de
83F6: 1D      			dec 	e 									; do 8 rows
83F7: 20E3    			jr 		nz,__LowOuter	
83F9:         	__LPExit:
83F9: DDE1    			pop 	ix
83FB: E1      			pop 	hl
83FC: D1      			pop 	de
83FD: C1      			pop 	bc
83FE: F1      			pop 	af
83FF: C9      			ret
              	
              			include "temp/__words.asm"					; vocabulary file.
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		console.asm
              	;		Purpose:	Console words.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; ========= console.setmode word =========
8400:         	def_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65:
8400: CDB385  	    call compileCallToSelf
8403: C3E980  			jp 		GFXMode
              	
              	; ========= console.char! word =========
8406:         	def_63_6f_6e_73_6f_6c_65_2e_63_68_61_72_21:
8406: CDB385  	    call compileCallToSelf
8409: C31A81  			jp 		GFXWriteCharacter
              	
              	; ========= console.hex! word =========
840C:         	def_63_6f_6e_73_6f_6c_65_2e_68_65_78_21:
840C: CDB385  	    call compileCallToSelf
840F: C32D81  			jp 		GFXWriteHexWord
              	
              	; ========= console.inkey word =========
8412:         	def_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79:
8412: CDB385  	    call compileCallToSelf
8415: EB      			ex 		de,hl
8416: CD5F81  			call 	IOScanKeyboard 						; read keyboard
8419: 6F      			ld 		l,a
841A: 2600    			ld 		h,$00
841C: C9      			ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		unary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Unary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= -- xmacro =========
841D:         	def_2d_2d:
841D: CDCA85  	    call compileExecutableCopySelf
8420:         	start_2d_2d:
8420: 01      	    db end_2d_2d-start_2d_2d-1
8421: 2B      			dec 	hl
8422:         	end_2d_2d:
8422: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= --- xmacro =========
8423:         	def_2d_2d_2d:
8423: CDCA85  	    call compileExecutableCopySelf
8426:         	start_2d_2d_2d:
8426: 02      	    db end_2d_2d_2d-start_2d_2d_2d-1
8427: 2B      			dec 	hl
8428: 2B      			dec 	hl
8429:         	end_2d_2d_2d:
8429: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= ++ xmacro =========
842A:         	def_2b_2b:
842A: CDCA85  	    call compileExecutableCopySelf
842D:         	start_2b_2b:
842D: 01      	    db end_2b_2b-start_2b_2b-1
842E: 23      			inc 	hl
842F:         	end_2b_2b:
842F: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= +++ xmacro =========
8430:         	def_2b_2b_2b:
8430: CDCA85  	    call compileExecutableCopySelf
8433:         	start_2b_2b_2b:
8433: 02      	    db end_2b_2b_2b-start_2b_2b_2b-1
8434: 23      			inc 	hl
8435: 23      			inc 	hl
8436:         	end_2b_2b_2b:
8436: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= 0- word =========
8437:         	def_30_2d:
8437: CDB385  	    call compileCallToSelf
843A:         	__negate:
843A: 7C      			ld 		a,h
843B: 2F      			cpl
843C: 67      			ld 		h,a
843D: 7D      			ld 		a,l
843E: 2F      			cpl
843F: 6F      			ld 		l,a
8440: 23      			inc 	hl
8441: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= 0< word =========
8442:         	def_30_3c:
8442: CDB385  	    call compileCallToSelf
8445: CB7C    			bit 	7,h
8447: 210000  			ld 		hl,$0000
844A: C8      			ret 	z
844B: 2B      			dec 	hl
844C: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= 0= word =========
844D:         	def_30_3d:
844D: CDB385  	    call compileCallToSelf
8450: 7C      			ld 		a,h
8451: B5      			or 		l
8452: 210000  			ld 		hl,$0000
8455: C0      			ret 	nz
8456: 2B      			dec 	hl
8457: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= 2* xmacro =========
8458:         	def_32_2a:
8458: CDCA85  	    call compileExecutableCopySelf
845B:         	start_32_2a:
845B: 01      	    db end_32_2a-start_32_2a-1
845C: 29      			add 	hl,hl
845D:         	end_32_2a:
845D: C9      	    ret
              	
              	; ========= 4* xmacro =========
845E:         	def_34_2a:
845E: CDCA85  	    call compileExecutableCopySelf
8461:         	start_34_2a:
8461: 02      	    db end_34_2a-start_34_2a-1
8462: 29      			add 	hl,hl
8463: 29      			add 	hl,hl
8464:         	end_34_2a:
8464: C9      	    ret
              	
              	; ========= 8* xmacro =========
8465:         	def_38_2a:
8465: CDCA85  	    call compileExecutableCopySelf
8468:         	start_38_2a:
8468: 03      	    db end_38_2a-start_38_2a-1
8469: 29      			add 	hl,hl
846A: 29      			add 	hl,hl
846B: 29      			add 	hl,hl
846C:         	end_38_2a:
846C: C9      	    ret
              	
              	; ========= 16* xmacro =========
846D:         	def_31_36_2a:
846D: CDCA85  	    call compileExecutableCopySelf
8470:         	start_31_36_2a:
8470: 04      	    db end_31_36_2a-start_31_36_2a-1
8471: 29      			add 	hl,hl
8472: 29      			add 	hl,hl
8473: 29      			add 	hl,hl
8474: 29      			add 	hl,hl
8475:         	end_31_36_2a:
8475: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= 2/ xmacro =========
8476:         	def_32_2f:
8476: CDCA85  	    call compileExecutableCopySelf
8479:         	start_32_2f:
8479: 04      	    db end_32_2f-start_32_2f-1
847A: CB2C    			sra 	h
847C: CB1D    			rr 		l
847E:         	end_32_2f:
847E: C9      	    ret
              	
              	; ========= 4/ xmacro =========
847F:         	def_34_2f:
847F: CDCA85  	    call compileExecutableCopySelf
8482:         	start_34_2f:
8482: 08      	    db end_34_2f-start_34_2f-1
8483: CB2C    			sra 	h
8485: CB1D    			rr 		l
8487: CB2C    			sra 	h
8489: CB1D    			rr 		l
848B:         	end_34_2f:
848B: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= abs word =========
848C:         	def_61_62_73:
848C: CDB385  	    call compileCallToSelf
848F: CB7C    			bit 	7,h
8491: C8      			ret		z
8492: C33A84  			jp 		__negate
              	
              	; ***************************************************************************************
              	
              	; ========= bswap xmacro =========
8495:         	def_62_73_77_61_70:
8495: CDCA85  	    call compileExecutableCopySelf
8498:         	start_62_73_77_61_70:
8498: 03      	    db end_62_73_77_61_70-start_62_73_77_61_70-1
8499: 7D      			ld 		a,l
849A: 6C      			ld 		l,h
849B: 67      			ld 		h,a
849C:         	end_62_73_77_61_70:
849C: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= not word =========
849D:         	def_6e_6f_74:
849D: CDB385  	    call compileCallToSelf
84A0: 7C      			ld 		a,h
84A1: 2F      			cpl
84A2: 67      			ld 		h,a
84A3: 7D      			ld 		a,l
84A4: 2F      			cpl
84A5: 6F      			ld 		l,a
84A6: C9      			ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		binary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Binary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	
              	; ========= < word =========
84A7:         	def_3c:
84A7: CDB385  	    call compileCallToSelf
84AA: 7C      		ld 		a,h 								 	; check if signs different.
84AB: AA      		xor 	d
84AC: 87      		add 	a,a 									; CS if different
84AD: 3004    		jr 		nc,__less_samesign
84AF: 7A      		ld 		a,d 									; different. set CS to sign of B
84B0: 87      		add 	a,a 									; if set (negative) B must be < A as A is +ve
84B1: 1805    		jr 		__less_returnc
84B3:         	__less_samesign:
84B3: D5      		push 	de 										; save DE
84B4: EB      		ex 		de,hl 									; -1 if B < A
84B5: ED52    		sbc 	hl,de 									; calculate B - A , hencs CS if < (Carry clear by add a,a)
84B7: D1      		pop 	de 										; restore DE
84B8:         	__less_returnc:
84B8: 3E00    		ld 		a,0 									; A 0
84BA: DE00    		sbc 	a,0 									; A $FF if CS.
84BC: 6F      		ld 		l,a 									; put in HL
84BD: 67      		ld 		h,a
84BE: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= = word =========
84BF:         	def_3d:
84BF: CDB385  	    call compileCallToSelf
84C2: 7C      		ld 		a,h 									; H = H ^ D
84C3: AA      		xor 	d
84C4: 67      		ld 		h,a
84C5: 7D      		ld 		a,l 									; A = (L ^ E) | (H ^ D)
84C6: B4      		or 		h 										; if A == 0 they are the same.
84C7: 210000  		ld 		hl,$0000 								; return 0 if different
84CA: C0      		ret 	nz
84CB: 2B      		dec 	hl 										; return -1
84CC: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= - word =========
84CD:         	def_2d:
84CD: CDB385  	    call compileCallToSelf
84D0: D5      		push 	de 										; save DE
84D1: EB      		ex 		de,hl 									; HL = B, DE = A
84D2: AF      		xor 	a  										; clear carry
84D3: ED52    		sbc 	hl,de 									; calculate B-A
84D5: D1      		pop 	de 										; restore DE
84D6: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= * word =========
84D7:         	def_2a:
84D7: CDB385  	    call compileCallToSelf
84DA: C33080  		jp  	MULTMultiply16
              	
              	; ***************************************************************************************
              	
              	; ========= / word =========
84DD:         	def_2f:
84DD: CDB385  	    call compileCallToSelf
84E0: D5      		push 	de
84E1: CD4A80  		call 	DIVDivideMod16
84E4: EB      		ex 		de,hl
84E5: D1      		pop 	de
84E6: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= + xmacro =========
84E7:         	def_2b:
84E7: CDCA85  	    call compileExecutableCopySelf
84EA:         	start_2b:
84EA: 01      	    db end_2b-start_2b-1
84EB: 19      		add 	hl,de
84EC:         	end_2b:
84EC: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= and word =========
84ED:         	def_61_6e_64:
84ED: CDB385  	    call compileCallToSelf
84F0: 7C      		ld 		a,h
84F1: A2      		and 	d
84F2: 67      		ld 		h,a
84F3: 7D      		ld 		a,l
84F4: A3      		and 	e
84F5: 6F      		ld 		l,a
84F6: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= mod word =========
84F7:         	def_6d_6f_64:
84F7: CDB385  	    call compileCallToSelf
84FA: D5      		push 	de
84FB: CD4A80  		call 	DIVDivideMod16
84FE: D1      		pop 	de
84FF: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= or word =========
8500:         	def_6f_72:
8500: CDB385  	    call compileCallToSelf
8503: 7C      		ld 		a,h
8504: B2      		or 		d
8505: 67      		ld 		h,a
8506: 7D      		ld 		a,l
8507: B3      		or 		e
8508: 6F      		ld 		l,a
8509: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= xor word =========
850A:         	def_78_6f_72:
850A: CDB385  	    call compileCallToSelf
850D: 7C      		ld 		a,h
850E: AA      		xor 	d
850F: 67      		ld 		h,a
8510: 7D      		ld 		a,l
8511: AB      		xor 	e
8512: 6F      		ld 		l,a
8513: C9      		ret
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		stack.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Stack words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= push macro =========
8514:         	def_70_75_73_68:
8514: CDC485  	    call compileCopySelf
8517:         	start_70_75_73_68:
8517: 01      	    db end_70_75_73_68-start_70_75_73_68-1
8518: E5      		push 	hl
8519:         	end_70_75_73_68:
8519: C9      	    ret
              	
              	; ========= pop macro =========
851A:         	def_70_6f_70:
851A: CDC485  	    call compileCopySelf
851D:         	start_70_6f_70:
851D: 02      	    db end_70_6f_70-start_70_6f_70-1
851E: EB      		ex 		de,hl
851F: E1      		pop 	hl
8520:         	end_70_6f_70:
8520: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= a>r macro =========
8521:         	def_61_3e_72:
8521: CDC485  	    call compileCopySelf
8524:         	start_61_3e_72:
8524: 01      	    db end_61_3e_72-start_61_3e_72-1
8525: E5      		push 	hl
8526:         	end_61_3e_72:
8526: C9      	    ret
              	
              	; ========= r>a macro =========
8527:         	def_72_3e_61:
8527: CDC485  	    call compileCopySelf
852A:         	start_72_3e_61:
852A: 01      	    db end_72_3e_61-start_72_3e_61-1
852B: E1      		pop 	hl
852C:         	end_72_3e_61:
852C: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= b>r macro =========
852D:         	def_62_3e_72:
852D: CDC485  	    call compileCopySelf
8530:         	start_62_3e_72:
8530: 01      	    db end_62_3e_72-start_62_3e_72-1
8531: D5      		push 	de
8532:         	end_62_3e_72:
8532: C9      	    ret
              	
              	; ========= r>b macro =========
8533:         	def_72_3e_62:
8533: CDC485  	    call compileCopySelf
8536:         	start_72_3e_62:
8536: 01      	    db end_72_3e_62-start_72_3e_62-1
8537: D1      		pop 	de
8538:         	end_72_3e_62:
8538: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c>r macro =========
8539:         	def_63_3e_72:
8539: CDC485  	    call compileCopySelf
853C:         	start_63_3e_72:
853C: 01      	    db end_63_3e_72-start_63_3e_72-1
853D: C5      		push 	bc
853E:         	end_63_3e_72:
853E: C9      	    ret
              	
              	; ========= r>c macro =========
853F:         	def_72_3e_63:
853F: CDC485  	    call compileCopySelf
8542:         	start_72_3e_63:
8542: 01      	    db end_72_3e_63-start_72_3e_63-1
8543: C1      		pop 	bc
8544:         	end_72_3e_63:
8544: C9      	    ret
              	
              	
              	; ***************************************************************************************
              	
              	; ========= ab>r macro =========
8545:         	def_61_62_3e_72:
8545: CDC485  	    call compileCopySelf
8548:         	start_61_62_3e_72:
8548: 02      	    db end_61_62_3e_72-start_61_62_3e_72-1
8549: D5      		push 	de
854A: E5      		push 	hl
854B:         	end_61_62_3e_72:
854B: C9      	    ret
              	
              	; ========= r>ab macro =========
854C:         	def_72_3e_61_62:
854C: CDC485  	    call compileCopySelf
854F:         	start_72_3e_61_62:
854F: 02      	    db end_72_3e_61_62-start_72_3e_61_62-1
8550: E1      		pop 	hl
8551: D1      		pop 	de
8552:         	end_72_3e_61_62:
8552: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= abc>r macro =========
8553:         	def_61_62_63_3e_72:
8553: CDC485  	    call compileCopySelf
8556:         	start_61_62_63_3e_72:
8556: 03      	    db end_61_62_63_3e_72-start_61_62_63_3e_72-1
8557: C5      		push 	bc
8558: D5      		push 	de
8559: E5      		push 	hl
855A:         	end_61_62_63_3e_72:
855A: C9      	    ret
              	
              	; ========= r>abc macro =========
855B:         	def_72_3e_61_62_63:
855B: CDC485  	    call compileCopySelf
855E:         	start_72_3e_61_62_63:
855E: 03      	    db end_72_3e_61_62_63-start_72_3e_61_62_63-1
855F: E1      		pop 	hl
8560: D1      		pop 	de
8561: C1      		pop 	bc
8562:         	end_72_3e_61_62_63:
8562: C9      	    ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		miscellany.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= , word =========
8563:         	def_2c:
8563: CDB385  	    call compileCallToSelf
8566: C38D80  			jp 		FARCompileWord
              	
              	; ***************************************************************************************
              	
              	; ========= ; macro =========
8569:         	def_3b:
8569: CDC485  	    call compileCopySelf
856C:         	start_3b:
856C: 01      	    db end_3b-start_3b-1
856D: C9      			ret
856E:         	end_3b:
856E: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c, word =========
856F:         	def_63_2c:
856F: CDB385  	    call compileCallToSelf
8572: 7D      			ld 		a,l
8573: C38D80  			jp 		FARCompileWord
              	
              	; ***************************************************************************************
              	
              	; ========= copy word =========
8576:         	def_63_6f_70_79:
8576: CDB385  	    call compileCallToSelf
8579: 78      			ld 		a,b 								; exit if C = 0
857A: B1      			or 		c
857B: C8      			ret 	z
              	
857C: C5      			push 	bc 									; BC count
857D: D5      			push 	de 									; DE target
857E: E5      			push 	hl 									; HL source
              	
857F: AF      			xor 	a 									; Clear C
8580: ED52    			sbc 	hl,de 								; check overlap ?
8582: 300B    			jr 		nc,__copy_gt_count 					; if source after target
8584: 19      			add 	hl,de 								; undo subtract
              	
8585: 09      			add 	hl,bc 								; add count to HL + DE
8586: EB      			ex 		de,hl
8587: 09      			add 	hl,bc
8588: EB      			ex 		de,hl
8589: 1B      			dec 	de 									; dec them, so now at the last byte to copy
858A: 2B      			dec 	hl
858B: EDB8    			lddr 										; do it backwards
858D: 1803    			jr 		__copy_exit
              	
858F:         	__copy_gt_count:
858F: 19      			add 	hl,de 								; undo subtract
8590: EDB0    			ldir										; do the copy
8592:         	__copy_exit:
8592: E1      			pop 	hl 									; restore registers
8593: D1      			pop 	de
8594: C1      			pop 	bc
8595: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= fill word =========
8596:         	def_66_69_6c_6c:
8596: CDB385  	    call compileCallToSelf
8599: 78      			ld 		a,b 								; exit if C = 0
859A: B1      			or 		c
859B: C8      			ret 	z
              	
859C: C5      			push 	bc 									; BC count
859D: D5      			push 	de 									; DE target, L byte
859E:         	__fill_loop:
859E: 7D      			ld 		a,l 								; copy a byte
859F: 12      			ld 		(de),a
85A0: 13      			inc 	de 									; bump pointer
85A1: 0B      			dec 	bc 									; dec counter and loop
85A2: 78      			ld 		a,b
85A3: B1      			or 		c
85A4: 20F8    			jr 		nz,__fill_loop
85A6: D1      			pop 	de 									; restore
85A7: C1      			pop 	bc
85A8: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= halt word =========
85A9:         	def_68_61_6c_74:
85A9: CDB385  	    call compileCallToSelf
85AC:         	__halt_loop:
85AC: F3      			di
85AD: 76      			halt
85AE: 18FC    			jr 		__halt_loop
              	
              	; ***************************************************************************************
              	
              	; ========= sys.stdheaderroutine word =========
85B0:         	def_73_79_73_2e_73_74_64_68_65_61_64_65_72_72_6f_75_74_69_6e_65:
85B0: CDB385  	    call compileCallToSelf
85B3:         	compileCallToSelf:
85B3: C3B685  			jp 		__compileCallToSelf
              	;
              	;		The header routine for normal code - compiles a call to the address immediately
              	;		following the 'call' to this routine.
              	;
85B6:         	__compileCallToSelf:
85B6: E3      			ex 		(sp),hl 							; get the routine addr into HL, old HL on TOS.
              	
85B7: 3ECD    			ld 		a,$CD 								; Z80 Call
85B9: CD7580  			call 	FARCompileByte
85BC: CD8D80  			call 	FARCompileWord
              	
85BF: E1      			pop 	hl 									; restore HL and exit
85C0: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= sys.stdmacroroutine word =========
85C1:         	def_73_79_73_2e_73_74_64_6d_61_63_72_6f_72_6f_75_74_69_6e_65:
85C1: CDB385  	    call compileCallToSelf
85C4:         	compileCopySelf:
85C4: C3CD85  			jp 		__compileCopySelf
              	
              	; ========= sys.stdexecmacroroutine word =========
85C7:         	def_73_79_73_2e_73_74_64_65_78_65_63_6d_61_63_72_6f_72_6f_75_74_69_6e_65:
85C7: CDB385  	    call compileCallToSelf
85CA:         	compileExecutableCopySelf:
85CA: C3CE85  			jp 		__compileExecutableCopySelf
              	
              	;
              	;		Macro code - compiles the code immediately following the call to this routine.
              	;		First byte is the length, subsequent is data.
              	;
              	
85CD:         	__compileCopySelf: 									; different addresses to tell executable ones.
85CD: 00      			nop
85CE:         	__compileExecutableCopySelf:
85CE: E3      			ex 		(sp),hl 							; routine start into HL, old HL on TOS
85CF: C5      			push 	bc 									; save BC
85D0: 46      			ld 		b,(hl)								; get count
85D1: 23      			inc 	hl
85D2:         	__copyMacroCode:
85D2: 7E      			ld 		a,(hl)								; do next byte
85D3: CD7580  			call 	FARCompileByte
85D6: 23      			inc 	hl
85D7: 10F9    			djnz 	__copyMacroCode
85D9: C1      			pop 	bc 									; restore and exit.
85DA: E1      			pop 	hl
85DB: C9      			ret
              	
              	
              	; ***************************************************************************************
              	
              	; ========= sys.variableroutine word =========
85DC:         	def_73_79_73_2e_76_61_72_69_61_62_6c_65_72_6f_75_74_69_6e_65:
85DC: CDB385  	    call compileCallToSelf
85DF:         	variableAddressCompiler:
85DF: 3EEB    			ld 		a,$EB 								; ex de,hl
85E1: CD7580  			call 	FARCompileByte
85E4: 3E21    			ld 		a,$21								; ld hl,xxxxx
85E6: CD7580  			call 	FARCompileByte
85E9: E1      			pop 	hl 									; var address
85EA: CD8D80  			call 	FARCompileWord
85ED: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= break macro =========
85EE:         	def_62_72_65_61_6b:
85EE: CDC485  	    call compileCopySelf
85F1:         	start_62_72_65_61_6b:
85F1: 02      	    db end_62_72_65_61_6b-start_62_72_65_61_6b-1
85F2: DD01    			db 		$DD,$01
85F4:         	end_62_72_65_61_6b:
85F4: C9      	    ret
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		register.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Register manipulation
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= swap xmacro =========
85F5:         	def_73_77_61_70:
85F5: CDCA85  	    call compileExecutableCopySelf
85F8:         	start_73_77_61_70:
85F8: 01      	    db end_73_77_61_70-start_73_77_61_70-1
85F9: EB      			ex 		de,hl
85FA:         	end_73_77_61_70:
85FA: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= a>b xmacro =========
85FB:         	def_61_3e_62:
85FB: CDCA85  	    call compileExecutableCopySelf
85FE:         	start_61_3e_62:
85FE: 02      	    db end_61_3e_62-start_61_3e_62-1
85FF: 54      			ld 		d,h
8600: 5D      			ld 		e,l
8601:         	end_61_3e_62:
8601: C9      	    ret
              	
              	; ========= a>c xmacro =========
8602:         	def_61_3e_63:
8602: CDCA85  	    call compileExecutableCopySelf
8605:         	start_61_3e_63:
8605: 02      	    db end_61_3e_63-start_61_3e_63-1
8606: 44      			ld 		b,h
8607: 4D      			ld 		c,l
8608:         	end_61_3e_63:
8608: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= b>a xmacro =========
8609:         	def_62_3e_61:
8609: CDCA85  	    call compileExecutableCopySelf
860C:         	start_62_3e_61:
860C: 02      	    db end_62_3e_61-start_62_3e_61-1
860D: 62      			ld 		h,d
860E: 6B      			ld 		l,e
860F:         	end_62_3e_61:
860F: C9      	    ret
              	
              	; ========= b>c xmacro =========
8610:         	def_62_3e_63:
8610: CDCA85  	    call compileExecutableCopySelf
8613:         	start_62_3e_63:
8613: 02      	    db end_62_3e_63-start_62_3e_63-1
8614: 42      			ld 		b,d
8615: 4B      			ld 		c,e
8616:         	end_62_3e_63:
8616: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c>a xmacro =========
8617:         	def_63_3e_61:
8617: CDCA85  	    call compileExecutableCopySelf
861A:         	start_63_3e_61:
861A: 02      	    db end_63_3e_61-start_63_3e_61-1
861B: 60      			ld 		h,b
861C: 69      			ld 		l,c
861D:         	end_63_3e_61:
861D: C9      	    ret
              	
              	; ========= c>b xmacro =========
861E:         	def_63_3e_62:
861E: CDCA85  	    call compileExecutableCopySelf
8621:         	start_63_3e_62:
8621: 02      	    db end_63_3e_62-start_63_3e_62-1
8622: 50      			ld 		d,b
8623: 59      			ld 		e,c
8624:         	end_63_3e_62:
8624: C9      	    ret
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		memory.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Memory operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= ! xmacro =========
8625:         	def_21:
8625: CDCA85  	    call compileExecutableCopySelf
8628:         	start_21:
8628: 04      	    db end_21-start_21-1
8629: 73      			ld 		(hl),e
862A: 23      			inc 	hl
862B: 72      			ld 		(hl),d
862C: 2B      			dec 	hl
862D:         	end_21:
862D: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= @ xmacro =========
862E:         	def_40:
862E: CDCA85  	    call compileExecutableCopySelf
8631:         	start_40:
8631: 04      	    db end_40-start_40-1
8632: 7E      			ld 		a,(hl)
8633: 23      			inc 	hl
8634: 66      			ld		h,(hl)
8635: 6F      			ld		l,a
8636:         	end_40:
8636: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= +! word =========
8637:         	def_2b_21:
8637: CDB385  	    call compileCallToSelf
863A: 7E      			ld 		a,(hl)
863B: 83      			add 	a,e
863C: 77      			ld 		(hl),a
863D: 23      			inc 	hl
863E: 7E      			ld 		a,(hl)
863F: 8A      			adc 	a,d
8640: 77      			ld 		(hl),a
8641: 2B      			dec 	hl
8642: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= c! xmacro =========
8643:         	def_63_21:
8643: CDCA85  	    call compileExecutableCopySelf
8646:         	start_63_21:
8646: 01      	    db end_63_21-start_63_21-1
8647: 73      			ld 		(hl),e
8648:         	end_63_21:
8648: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c@ xmacro =========
8649:         	def_63_40:
8649: CDCA85  	    call compileExecutableCopySelf
864C:         	start_63_40:
864C: 03      	    db end_63_40-start_63_40-1
864D: 6E      			ld 		l,(hl)
864E: 2600    			ld 		h,0
8650:         	end_63_40:
8650: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= p@ xmacro =========
8651:         	def_70_40:
8651: CDCA85  	    call compileExecutableCopySelf
8654:         	start_70_40:
8654: 04      	    db end_70_40-start_70_40-1
8655: ED68    			in 		l,(c)
8657: 2600    			ld 		h,0
8659:         	end_70_40:
8659: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= p! macro =========
865A:         	def_70_21:
865A: CDC485  	    call compileCopySelf
865D:         	start_70_21:
865D: 02      	    db end_70_21-start_70_21-1
865E: ED69    			out 	(c),l
8660:         	end_70_21:
8660: C9      	    ret
              			
8661:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
8661: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
8665: 00000000	
8669: 0C1E1E0C	
866D: 0C000C00	
8671: 36360000	
8675: 00000000	
8679: 36367F36	
867D: 7F363600	
8681: 183E603C	
8685: 067C1800	
8689: 0063660C	
868D: 18336300	
8691: 1C361C3B	
8695: 6E663B00	
8699: 30306000	
869D: 00000000	
86A1: 0C183030	
86A5: 30180C00	
86A9: 30180C0C	
86AD: 0C183000	
86B1: 00331E7F	
86B5: 1E330000	
86B9: 0018187E	
86BD: 18180000	
86C1: 00000000	
86C5: 00181830	
86C9: 0000007E	
86CD: 00000000	
86D1: 00000000	
86D5: 00181800	
86D9: 03060C18	
86DD: 30604000	
86E1: 3E63676F	
86E5: 7B733E00	
86E9: 18381818	
86ED: 18187E00	
86F1: 3C66061C	
86F5: 30667E00	
86F9: 3C66061C	
86FD: 06663C00	
8701: 0E1E3666	
8705: 7F060F00	
8709: 7E607C06	
870D: 06663C00	
8711: 1C30607C	
8715: 66663C00	
8719: 7E66060C	
871D: 18181800	
8721: 3C66663C	
8725: 66663C00	
8729: 3C66663E	
872D: 060C3800	
8731: 00181800	
8735: 00181800	
8739: 00181800	
873D: 00181830	
8741: 0C183060	
8745: 30180C00	
8749: 00007E00	
874D: 007E0000	
8751: 30180C06	
8755: 0C183000	
8759: 3C66060C	
875D: 18001800	
8761: 3E636F6F	
8765: 6F603C00	
8769: 183C6666	
876D: 7E666600	
8771: 7E33333E	
8775: 33337E00	
8779: 1E336060	
877D: 60331E00	
8781: 7C363333	
8785: 33367C00	
8789: 7F31343C	
878D: 34317F00	
8791: 7F31343C	
8795: 34307800	
8799: 1E336060	
879D: 67331F00	
87A1: 6666667E	
87A5: 66666600	
87A9: 3C181818	
87AD: 18183C00	
87B1: 0F060606	
87B5: 66663C00	
87B9: 7333363C	
87BD: 36337300	
87C1: 78303030	
87C5: 31337F00	
87C9: 63777F7F	
87CD: 6B636300	
87D1: 63737B6F	
87D5: 67636300	
87D9: 1C366363	
87DD: 63361C00	
87E1: 7E33333E	
87E5: 30307800	
87E9: 3C666666	
87ED: 6E3C0E00	
87F1: 7E33333E	
87F5: 36337300	
87F9: 3C667038	
87FD: 0E663C00	
8801: 7E5A1818	
8805: 18183C00	
8809: 66666666	
880D: 66667E00	
8811: 66666666	
8815: 663C1800	
8819: 6363636B	
881D: 7F776300	
8821: 6363361C	
8825: 1C366300	
8829: 6666663C	
882D: 18183C00	
8831: 7F63460C	
8835: 19337F00	
8839: 3C303030	
883D: 30303C00	
8841: 6030180C	
8845: 06030100	
8849: 3C0C0C0C	
884D: 0C0C3C00	
8851: 081C3663	
8855: 00000000	
8859: 00000000	
885D: 0000007F	
8861: 18180C00	
8865: 00000000	
8869: 00003C06	
886D: 3E663B00	
8871: 7030303E	
8875: 33336E00	
8879: 00003C66	
887D: 60663C00	
8881: 0E06063E	
8885: 66663B00	
8889: 00003C66	
888D: 7E603C00	
8891: 1C363078	
8895: 30307800	
8899: 00003B66	
889D: 663E067C	
88A1: 7030363B	
88A5: 33337300	
88A9: 18003818	
88AD: 18183C00	
88B1: 06000606	
88B5: 0666663C	
88B9: 70303336	
88BD: 3C367300	
88C1: 38181818	
88C5: 18183C00	
88C9: 0000667F	
88CD: 7F6B6300	
88D1: 00007C66	
88D5: 66666600	
88D9: 00003C66	
88DD: 66663C00	
88E1: 00006E33	
88E5: 333E3078	
88E9: 00003B66	
88ED: 663E060F	
88F1: 00006E3B	
88F5: 33307800	
88F9: 00003E60	
88FD: 3C067C00	
8901: 08183E18	
8905: 181A0C00	
8909: 00006666	
890D: 66663B00	
8911: 00006666	
8915: 663C1800	
8919: 0000636B	
891D: 7F7F3600	
8921: 00006336	
8925: 1C366300	
8929: 00006666	
892D: 663E067C	
8931: 00007E4C	
8935: 18327E00	
8939: 0E181870	
893D: 18180E00	
8941: 0C0C0C00	
8945: 0C0C0C00	
8949: 7018180E	
894D: 18187000	
8951: 3B6E0000	
8955: 00000000	
8959: 00...   	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8961:         	SystemInformation:
              	
8961:         	Here:												; +0 	Here 
8961: 9789    			dw 		FreeMemory
8963:         	HerePage: 											; +2	Here.Page
8963: 2A00    			db 		FirstCodePage,0
8965:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
8965: 2C000000			db 		FirstCodePage+2,0,0,0
8969:         	DisplayInfo: 										; +8 	Display information
8969: 71890000			dw 		DisplayInformation,0		
896D:         	BootAddress:										; +12 	Boot Address
896D: 2D80    			dw 		StopDefault
896F:         	BootPage:											; +14 	Boot Page
896F: 2A00    			db 		FirstCodePage,0
              			
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
8971:         	DisplayInformation:
              	
8971:         	SIScreenWidth: 										; +0 	screen width
8971: 00000000			db 		0,0,0,0	
8975:         	SIScreenHeight:										; +4 	screen height
8975: 00000000			db 		0,0,0,0
8979:         	SIScreenSize:										; +8 	char size of screen
8979: 00000000			dw 		0,0		
897D:         	SIScreenMode:										; +12 	current mode
897D: 00000000			db 		0,0,0,0
8981:         	SIFontBase:											; font in use
8981: 6186    			dw 		AlternateFont
8983:         	SIScreenDriver:										; Screen Driver
8983: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8985:         	__PAGEStackPointer: 								; stack used for switching pages
8985: 0000    			dw 		0
8987:         	__PAGEStackBase:
8987: FFFFFFFF			ds 		16
898B: FF...   	
              	
8997:         	FreeMemory:		
              	
8997: FFFFFFFF			org 	$C000
899B: FF...   	
              			include	"temp/__dictionary.asm"
              	; ----------------------------------------
C000: 06      	    db    6
C001: 2A      	    db    FirstCodePage
C002: 2586    	    dw    def_21
C004: 01      	    db    1
C005: 21      	    db    "!"
              	; ----------------------------------------
C006: 06      	    db    6
C007: 2A      	    db    FirstCodePage
C008: D784    	    dw    def_2a
C00A: 01      	    db    1
C00B: 2A      	    db    "*"
              	; ----------------------------------------
C00C: 06      	    db    6
C00D: 2A      	    db    FirstCodePage
C00E: E784    	    dw    def_2b
C010: 01      	    db    1
C011: 2B      	    db    "+"
              	; ----------------------------------------
C012: 07      	    db    7
C013: 2A      	    db    FirstCodePage
C014: 3786    	    dw    def_2b_21
C016: 02      	    db    2
C017: 2B21    	    db    "+!"
              	; ----------------------------------------
C019: 07      	    db    7
C01A: 2A      	    db    FirstCodePage
C01B: 2A84    	    dw    def_2b_2b
C01D: 02      	    db    2
C01E: 2B2B    	    db    "++"
              	; ----------------------------------------
C020: 08      	    db    8
C021: 2A      	    db    FirstCodePage
C022: 3084    	    dw    def_2b_2b_2b
C024: 03      	    db    3
C025: 2B2B2B  	    db    "+++"
              	; ----------------------------------------
C028: 06      	    db    6
C029: 2A      	    db    FirstCodePage
C02A: 6385    	    dw    def_2c
C02C: 01      	    db    1
C02D: 2C      	    db    ","
              	; ----------------------------------------
C02E: 06      	    db    6
C02F: 2A      	    db    FirstCodePage
C030: CD84    	    dw    def_2d
C032: 01      	    db    1
C033: 2D      	    db    "-"
              	; ----------------------------------------
C034: 07      	    db    7
C035: 2A      	    db    FirstCodePage
C036: 1D84    	    dw    def_2d_2d
C038: 02      	    db    2
C039: 2D2D    	    db    "--"
              	; ----------------------------------------
C03B: 08      	    db    8
C03C: 2A      	    db    FirstCodePage
C03D: 2384    	    dw    def_2d_2d_2d
C03F: 03      	    db    3
C040: 2D2D2D  	    db    "---"
              	; ----------------------------------------
C043: 06      	    db    6
C044: 2A      	    db    FirstCodePage
C045: DD84    	    dw    def_2f
C047: 01      	    db    1
C048: 2F      	    db    "/"
              	; ----------------------------------------
C049: 07      	    db    7
C04A: 2A      	    db    FirstCodePage
C04B: 3784    	    dw    def_30_2d
C04D: 02      	    db    2
C04E: 302D    	    db    "0-"
              	; ----------------------------------------
C050: 07      	    db    7
C051: 2A      	    db    FirstCodePage
C052: 4284    	    dw    def_30_3c
C054: 02      	    db    2
C055: 303C    	    db    "0<"
              	; ----------------------------------------
C057: 07      	    db    7
C058: 2A      	    db    FirstCodePage
C059: 4D84    	    dw    def_30_3d
C05B: 02      	    db    2
C05C: 303D    	    db    "0="
              	; ----------------------------------------
C05E: 08      	    db    8
C05F: 2A      	    db    FirstCodePage
C060: 6D84    	    dw    def_31_36_2a
C062: 03      	    db    3
C063: 31362A  	    db    "16*"
              	; ----------------------------------------
C066: 07      	    db    7
C067: 2A      	    db    FirstCodePage
C068: 5884    	    dw    def_32_2a
C06A: 02      	    db    2
C06B: 322A    	    db    "2*"
              	; ----------------------------------------
C06D: 07      	    db    7
C06E: 2A      	    db    FirstCodePage
C06F: 7684    	    dw    def_32_2f
C071: 02      	    db    2
C072: 322F    	    db    "2/"
              	; ----------------------------------------
C074: 07      	    db    7
C075: 2A      	    db    FirstCodePage
C076: 5E84    	    dw    def_34_2a
C078: 02      	    db    2
C079: 342A    	    db    "4*"
              	; ----------------------------------------
C07B: 07      	    db    7
C07C: 2A      	    db    FirstCodePage
C07D: 7F84    	    dw    def_34_2f
C07F: 02      	    db    2
C080: 342F    	    db    "4/"
              	; ----------------------------------------
C082: 07      	    db    7
C083: 2A      	    db    FirstCodePage
C084: 6584    	    dw    def_38_2a
C086: 02      	    db    2
C087: 382A    	    db    "8*"
              	; ----------------------------------------
C089: 06      	    db    6
C08A: 2A      	    db    FirstCodePage
C08B: 6985    	    dw    def_3b
C08D: 01      	    db    1
C08E: 3B      	    db    ";"
              	; ----------------------------------------
C08F: 06      	    db    6
C090: 2A      	    db    FirstCodePage
C091: A784    	    dw    def_3c
C093: 01      	    db    1
C094: 3C      	    db    "<"
              	; ----------------------------------------
C095: 06      	    db    6
C096: 2A      	    db    FirstCodePage
C097: BF84    	    dw    def_3d
C099: 01      	    db    1
C09A: 3D      	    db    "="
              	; ----------------------------------------
C09B: 06      	    db    6
C09C: 2A      	    db    FirstCodePage
C09D: 2E86    	    dw    def_40
C09F: 01      	    db    1
C0A0: 40      	    db    "@"
              	; ----------------------------------------
C0A1: 08      	    db    8
C0A2: 2A      	    db    FirstCodePage
C0A3: FB85    	    dw    def_61_3e_62
C0A5: 03      	    db    3
C0A6: 613E62  	    db    "a>b"
              	; ----------------------------------------
C0A9: 08      	    db    8
C0AA: 2A      	    db    FirstCodePage
C0AB: 0286    	    dw    def_61_3e_63
C0AD: 03      	    db    3
C0AE: 613E63  	    db    "a>c"
              	; ----------------------------------------
C0B1: 08      	    db    8
C0B2: 2A      	    db    FirstCodePage
C0B3: 2185    	    dw    def_61_3e_72
C0B5: 03      	    db    3
C0B6: 613E72  	    db    "a>r"
              	; ----------------------------------------
C0B9: 09      	    db    9
C0BA: 2A      	    db    FirstCodePage
C0BB: 4585    	    dw    def_61_62_3e_72
C0BD: 04      	    db    4
C0BE: 61623E72	    db    "ab>r"
              	; ----------------------------------------
C0C2: 0A      	    db    10
C0C3: 2A      	    db    FirstCodePage
C0C4: 5385    	    dw    def_61_62_63_3e_72
C0C6: 05      	    db    5
C0C7: 6162633E	    db    "abc>r"
C0CB: 72      	
              	; ----------------------------------------
C0CC: 08      	    db    8
C0CD: 2A      	    db    FirstCodePage
C0CE: 8C84    	    dw    def_61_62_73
C0D0: 03      	    db    3
C0D1: 616273  	    db    "abs"
              	; ----------------------------------------
C0D4: 08      	    db    8
C0D5: 2A      	    db    FirstCodePage
C0D6: ED84    	    dw    def_61_6e_64
C0D8: 03      	    db    3
C0D9: 616E64  	    db    "and"
              	; ----------------------------------------
C0DC: 08      	    db    8
C0DD: 2A      	    db    FirstCodePage
C0DE: 0986    	    dw    def_62_3e_61
C0E0: 03      	    db    3
C0E1: 623E61  	    db    "b>a"
              	; ----------------------------------------
C0E4: 08      	    db    8
C0E5: 2A      	    db    FirstCodePage
C0E6: 1086    	    dw    def_62_3e_63
C0E8: 03      	    db    3
C0E9: 623E63  	    db    "b>c"
              	; ----------------------------------------
C0EC: 08      	    db    8
C0ED: 2A      	    db    FirstCodePage
C0EE: 2D85    	    dw    def_62_3e_72
C0F0: 03      	    db    3
C0F1: 623E72  	    db    "b>r"
              	; ----------------------------------------
C0F4: 0A      	    db    10
C0F5: 2A      	    db    FirstCodePage
C0F6: EE85    	    dw    def_62_72_65_61_6b
C0F8: 05      	    db    5
C0F9: 62726561	    db    "break"
C0FD: 6B      	
              	; ----------------------------------------
C0FE: 0A      	    db    10
C0FF: 2A      	    db    FirstCodePage
C100: 9584    	    dw    def_62_73_77_61_70
C102: 05      	    db    5
C103: 62737761	    db    "bswap"
C107: 70      	
              	; ----------------------------------------
C108: 07      	    db    7
C109: 2A      	    db    FirstCodePage
C10A: 4386    	    dw    def_63_21
C10C: 02      	    db    2
C10D: 6321    	    db    "c!"
              	; ----------------------------------------
C10F: 07      	    db    7
C110: 2A      	    db    FirstCodePage
C111: 6F85    	    dw    def_63_2c
C113: 02      	    db    2
C114: 632C    	    db    "c,"
              	; ----------------------------------------
C116: 08      	    db    8
C117: 2A      	    db    FirstCodePage
C118: 1786    	    dw    def_63_3e_61
C11A: 03      	    db    3
C11B: 633E61  	    db    "c>a"
              	; ----------------------------------------
C11E: 08      	    db    8
C11F: 2A      	    db    FirstCodePage
C120: 1E86    	    dw    def_63_3e_62
C122: 03      	    db    3
C123: 633E62  	    db    "c>b"
              	; ----------------------------------------
C126: 08      	    db    8
C127: 2A      	    db    FirstCodePage
C128: 3985    	    dw    def_63_3e_72
C12A: 03      	    db    3
C12B: 633E72  	    db    "c>r"
              	; ----------------------------------------
C12E: 07      	    db    7
C12F: 2A      	    db    FirstCodePage
C130: 4986    	    dw    def_63_40
C132: 02      	    db    2
C133: 6340    	    db    "c@"
              	; ----------------------------------------
C135: 12      	    db    18
C136: 2A      	    db    FirstCodePage
C137: 0684    	    dw    def_63_6f_6e_73_6f_6c_65_2e_63_68_61_72_21
C139: 0D      	    db    13
C13A: 636F6E73	    db    "console.char!"
C13E: 6F6C652E	
C142: 63686172	
C146: 21      	
              	; ----------------------------------------
C147: 11      	    db    17
C148: 2A      	    db    FirstCodePage
C149: 0C84    	    dw    def_63_6f_6e_73_6f_6c_65_2e_68_65_78_21
C14B: 0C      	    db    12
C14C: 636F6E73	    db    "console.hex!"
C150: 6F6C652E	
C154: 68657821	
              	; ----------------------------------------
C158: 12      	    db    18
C159: 2A      	    db    FirstCodePage
C15A: 1284    	    dw    def_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79
C15C: 0D      	    db    13
C15D: 636F6E73	    db    "console.inkey"
C161: 6F6C652E	
C165: 696E6B65	
C169: 79      	
              	; ----------------------------------------
C16A: 14      	    db    20
C16B: 2A      	    db    FirstCodePage
C16C: 0084    	    dw    def_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65
C16E: 0F      	    db    15
C16F: 636F6E73	    db    "console.setmode"
C173: 6F6C652E	
C177: 7365746D	
C17B: 6F6465  	
              	; ----------------------------------------
C17E: 09      	    db    9
C17F: 2A      	    db    FirstCodePage
C180: 7685    	    dw    def_63_6f_70_79
C182: 04      	    db    4
C183: 636F7079	    db    "copy"
              	; ----------------------------------------
C187: 09      	    db    9
C188: 2A      	    db    FirstCodePage
C189: 9685    	    dw    def_66_69_6c_6c
C18B: 04      	    db    4
C18C: 66696C6C	    db    "fill"
              	; ----------------------------------------
C190: 09      	    db    9
C191: 2A      	    db    FirstCodePage
C192: A985    	    dw    def_68_61_6c_74
C194: 04      	    db    4
C195: 68616C74	    db    "halt"
              	; ----------------------------------------
C199: 08      	    db    8
C19A: 2A      	    db    FirstCodePage
C19B: F784    	    dw    def_6d_6f_64
C19D: 03      	    db    3
C19E: 6D6F64  	    db    "mod"
              	; ----------------------------------------
C1A1: 08      	    db    8
C1A2: 2A      	    db    FirstCodePage
C1A3: 9D84    	    dw    def_6e_6f_74
C1A5: 03      	    db    3
C1A6: 6E6F74  	    db    "not"
              	; ----------------------------------------
C1A9: 07      	    db    7
C1AA: 2A      	    db    FirstCodePage
C1AB: 0085    	    dw    def_6f_72
C1AD: 02      	    db    2
C1AE: 6F72    	    db    "or"
              	; ----------------------------------------
C1B0: 07      	    db    7
C1B1: 2A      	    db    FirstCodePage
C1B2: 5A86    	    dw    def_70_21
C1B4: 02      	    db    2
C1B5: 7021    	    db    "p!"
              	; ----------------------------------------
C1B7: 07      	    db    7
C1B8: 2A      	    db    FirstCodePage
C1B9: 5186    	    dw    def_70_40
C1BB: 02      	    db    2
C1BC: 7040    	    db    "p@"
              	; ----------------------------------------
C1BE: 08      	    db    8
C1BF: 2A      	    db    FirstCodePage
C1C0: 1A85    	    dw    def_70_6f_70
C1C2: 03      	    db    3
C1C3: 706F70  	    db    "pop"
              	; ----------------------------------------
C1C6: 09      	    db    9
C1C7: 2A      	    db    FirstCodePage
C1C8: 1485    	    dw    def_70_75_73_68
C1CA: 04      	    db    4
C1CB: 70757368	    db    "push"
              	; ----------------------------------------
C1CF: 08      	    db    8
C1D0: 2A      	    db    FirstCodePage
C1D1: 2785    	    dw    def_72_3e_61
C1D3: 03      	    db    3
C1D4: 723E61  	    db    "r>a"
              	; ----------------------------------------
C1D7: 09      	    db    9
C1D8: 2A      	    db    FirstCodePage
C1D9: 4C85    	    dw    def_72_3e_61_62
C1DB: 04      	    db    4
C1DC: 723E6162	    db    "r>ab"
              	; ----------------------------------------
C1E0: 0A      	    db    10
C1E1: 2A      	    db    FirstCodePage
C1E2: 5B85    	    dw    def_72_3e_61_62_63
C1E4: 05      	    db    5
C1E5: 723E6162	    db    "r>abc"
C1E9: 63      	
              	; ----------------------------------------
C1EA: 08      	    db    8
C1EB: 2A      	    db    FirstCodePage
C1EC: 3385    	    dw    def_72_3e_62
C1EE: 03      	    db    3
C1EF: 723E62  	    db    "r>b"
              	; ----------------------------------------
C1F2: 08      	    db    8
C1F3: 2A      	    db    FirstCodePage
C1F4: 3F85    	    dw    def_72_3e_63
C1F6: 03      	    db    3
C1F7: 723E63  	    db    "r>c"
              	; ----------------------------------------
C1FA: 09      	    db    9
C1FB: 2A      	    db    FirstCodePage
C1FC: F585    	    dw    def_73_77_61_70
C1FE: 04      	    db    4
C1FF: 73776170	    db    "swap"
              	; ----------------------------------------
C203: 1C      	    db    28
C204: 2A      	    db    FirstCodePage
C205: C785    	    dw    def_73_79_73_2e_73_74_64_65_78_65_63_6d_61_63_72_6f_72_6f_75_74_69_6e_65
C207: 17      	    db    23
C208: 7379732E	    db    "sys.stdexecmacroroutine"
C20C: 73746465	
C210: 7865636D	
C214: 6163726F	
C218: 726F7574	
C21C: 696E65  	
              	; ----------------------------------------
C21F: 19      	    db    25
C220: 2A      	    db    FirstCodePage
C221: B085    	    dw    def_73_79_73_2e_73_74_64_68_65_61_64_65_72_72_6f_75_74_69_6e_65
C223: 14      	    db    20
C224: 7379732E	    db    "sys.stdheaderroutine"
C228: 73746468	
C22C: 65616465	
C230: 72726F75	
C234: 74696E65	
              	; ----------------------------------------
C238: 18      	    db    24
C239: 2A      	    db    FirstCodePage
C23A: C185    	    dw    def_73_79_73_2e_73_74_64_6d_61_63_72_6f_72_6f_75_74_69_6e_65
C23C: 13      	    db    19
C23D: 7379732E	    db    "sys.stdmacroroutine"
C241: 7374646D	
C245: 6163726F	
C249: 726F7574	
C24D: 696E65  	
              	; ----------------------------------------
C250: 18      	    db    24
C251: 2A      	    db    FirstCodePage
C252: DC85    	    dw    def_73_79_73_2e_76_61_72_69_61_62_6c_65_72_6f_75_74_69_6e_65
C254: 13      	    db    19
C255: 7379732E	    db    "sys.variableroutine"
C259: 76617269	
C25D: 61626C65	
C261: 726F7574	
C265: 696E65  	
              	; ----------------------------------------
C268: 08      	    db    8
C269: 2A      	    db    FirstCodePage
C26A: 0A85    	    dw    def_78_6f_72
C26C: 03      	    db    3
C26D: 786F72  	    db    "xor"
              	
C270: 00      	    db    0
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4271 = 17009

; +++ global symbols +++

AlternateFont           = $8661 = 34401          kernel.asm:64
Boot                    = $8006 = 32774          kernel.asm:32
BootAddress             = $896D = 35181          data.asm:28
BootPage                = $896F = 35183          data.asm:30
DIVDivideMod16          = $804A = 32842          divide.asm:18
DictionaryPage          = $0020 =    32          kernel.asm:16 (unused)
DisplayInfo             = $8969 = 35177          data.asm:26 (unused)
DisplayInformation      = $8971 = 35185          data.asm:39
Div16_Loop1             = $8054 = 32852          divide.asm:27
Div16_Loop2             = $8065 = 32869          divide.asm:41
Div16_NoAdd1            = $805C = 32860          divide.asm:33
Div16_NoAdd2            = $806D = 32877          divide.asm:47
EditBuffer              = $7B08 = 31496          kernel.asm:24 (unused)
EditPageSize            = $0200 =   512          kernel.asm:19 (unused)
FARCompileByte          = $8075 = 32885          farmemory.asm:18
FARCompileWord          = $808D = 32909          farmemory.asm:40
FirstCodePage           = $002A =    42          kernel.asm:20
FirstSourcePage         = $0022 =    34          kernel.asm:17 (unused)
FreeMemory              = $8997 = 35223          data.asm:65
GFXInitialise48k        = $822C = 33324          screen48k.asm:19
GFXInitialiseLayer2     = $82A4 = 33444          screen_layer2.asm:19
GFXInitialiseLowRes     = $835B = 33627          screen_lores.asm:18
GFXMode                 = $80E9 = 33001          graphics.asm:18
GFXPrintCharacter48k    = $8258 = 33368          screen48k.asm:53
GFXPrintCharacterLayer2 = $82D4 = 33492          screen_layer2.asm:55
GFXPrintCharacterLowRes = $8385 = 33669          screen_lores.asm:50
GFXWriteCharacter       = $811A = 33050          graphics.asm:62
GFXWriteHexWord         = $812D = 33069          graphics.asm:85
GFXWriteHexWordA        = $812F = 33071          graphics.asm:87 (unused)
Here                    = $8961 = 35169          data.asm:20
HerePage                = $8963 = 35171          data.asm:22
IOScanKeyboard          = $815F = 33119          keyboard.asm:19
L2PClear                = $82AD = 33453          screen_layer2.asm:26
L2PClearBank            = $82BC = 33468          screen_layer2.asm:34
LowClearScreen          = $836E = 33646          screen_lores.asm:30
MULTMultiply16          = $8030 = 32816          multiply.asm:18
NextFreePage            = $8965 = 35173          data.asm:24 (unused)
PAGEInitialise          = $80A8 = 32936          paging.asm:18
PAGERestore             = $80D3 = 32979          paging.asm:64
PAGESwitch              = $80BA = 32954          paging.asm:36
SIFontBase              = $8981 = 35201          data.asm:49
SIScreenDriver          = $8983 = 35203          data.asm:51
SIScreenHeight          = $8975 = 35189          data.asm:43
SIScreenMode            = $897D = 35197          data.asm:47 (unused)
SIScreenSize            = $8979 = 35193          data.asm:45
SIScreenWidth           = $8971 = 35185          data.asm:41
SourcePageCount         = $0004 =     4          kernel.asm:18
StackTop                = $7EFC = 32508          kernel.asm:25
StopDefault             = $802D = 32813          kernel.asm:50
SystemInformation       = $8961 = 35169          data.asm:18
__Core__Mult_Loop       = $8037 = 32823          multiply.asm:24
__Core__Mult_Shift      = $803C = 32828          multiply.asm:28
__GFXConfigure          = $80FF = 33023          graphics.asm:37
__GFXLayer2             = $80F7 = 33015          graphics.asm:30
__GFXLowRes             = $80FC = 33020          graphics.asm:34
__GFXWCExit             = $8128 = 33064          graphics.asm:72
__GFXWHByte             = $8141 = 33089          graphics.asm:103
__GFXWHDigit            = $8157 = 33111          graphics.asm:117
__GFXWHNibble           = $814E = 33102          graphics.asm:111
__L2Exit                = $8354 = 33620          screen_layer2.asm:156
__L2Loop                = $8345 = 33605          screen_layer2.asm:143
__L2Not1                = $82F0 = 33520          screen_layer2.asm:77
__L2Not2                = $82F6 = 33526          screen_layer2.asm:81
__L2Not3                = $82FC = 33532          screen_layer2.asm:85
__L2NotCursor           = $8307 = 33543          screen_layer2.asm:94
__L2NotSet              = $834B = 33611          screen_layer2.asm:148
__L2Outer               = $833C = 33596          screen_layer2.asm:137
__LPExit                = $83F9 = 33785          screen_lores.asm:143
__LowLoop               = $83E5 = 33765          screen_lores.asm:127
__LowNotLower2          = $83DA = 33754          screen_lores.asm:119
__LowNotReverse         = $83A7 = 33703          screen_lores.asm:79
__LowNotSet             = $83EB = 33771          screen_lores.asm:132
__LowOuter              = $83DC = 33756          screen_lores.asm:121
__PAGEStackBase         = $8987 = 35207          data.asm:62
__PAGEStackPointer      = $8985 = 35205          data.asm:60
__ZXWCCopy              = $8298 = 33432          screen48k.asm:115
__ZXWCExit              = $829F = 33439          screen48k.asm:122
___kr4                  = $8190 = 33168          keyboard.asm:50
__compileCallToSelf     = $85B6 = 34230          __words.asm:621
__compileCopySelf       = $85CD = 34253          __words.asm:650
__compileExecutableCopySelf = $85CE = 34254          __words.asm:652
__copyMacroCode         = $85D2 = 34258          __words.asm:657
__copy_exit             = $8592 = 34194          __words.asm:571
__copy_gt_count         = $858F = 34191          __words.asm:568
__cs1                   = $823C = 33340          screen48k.asm:29
__cs2                   = $8244 = 33348          screen48k.asm:34
__fill_loop             = $859E = 34206          __words.asm:588
__halt_loop             = $85AC = 34220          __words.asm:605
__kr1                   = $8174 = 33140          keyboard.asm:33
__kr2                   = $817F = 33151          keyboard.asm:39
__kr3                   = $8181 = 33153          keyboard.asm:42
__kr_exit               = $81B0 = 33200          keyboard.asm:80
__kr_keypressed         = $81AA = 33194          keyboard.asm:74
__kr_no_shift_table     = $81B4 = 33204          keyboard.asm:95
__kr_shift_table        = $81DC = 33244          keyboard.asm:101
__kr_symbol_shift_table = $81DC = 33244          keyboard.asm:102
__less_returnc          = $84B8 = 33976          __words.asm:258
__less_samesign         = $84B3 = 33971          __words.asm:253
__negate                = $843A = 33850          __words.asm:95
_end                    = $C271 = 49777          kernel.asm:26 (unused)
_size                   = $4271 = 17009          kernel.asm:26 (unused)
compileCallToSelf       = $85B3 = 34227          __words.asm:615
compileCopySelf         = $85C4 = 34244          __words.asm:636
compileExecutableCopySelf = $85CA = 34250          __words.asm:642
def_21                  = $8625 = 34341          __words.asm:790
def_2a                  = $84D7 = 34007          __words.asm:295
def_2b                  = $84E7 = 34023          __words.asm:313
def_2b_21               = $8637 = 34359          __words.asm:818
def_2b_2b               = $842A = 33834          __words.asm:70
def_2b_2b_2b            = $8430 = 33840          __words.asm:81
def_2c                  = $8563 = 34147          __words.asm:518
def_2d                  = $84CD = 33997          __words.asm:283
def_2d_2d               = $841D = 33821          __words.asm:47
def_2d_2d_2d            = $8423 = 33827          __words.asm:58
def_2f                  = $84DD = 34013          __words.asm:302
def_30_2d               = $8437 = 33847          __words.asm:93
def_30_3c               = $8442 = 33858          __words.asm:108
def_30_3d               = $844D = 33869          __words.asm:119
def_31_36_2a            = $846D = 33901          __words.asm:161
def_32_2a               = $8458 = 33880          __words.asm:131
def_32_2f               = $8476 = 33910          __words.asm:175
def_34_2a               = $845E = 33886          __words.asm:140
def_34_2f               = $847F = 33919          __words.asm:185
def_38_2a               = $8465 = 33893          __words.asm:150
def_3b                  = $8569 = 34153          __words.asm:525
def_3c                  = $84A7 = 33959          __words.asm:244
def_3d                  = $84BF = 33983          __words.asm:268
def_40                  = $862E = 34350          __words.asm:804
def_61_3e_62            = $85FB = 34299          __words.asm:715
def_61_3e_63            = $8602 = 34306          __words.asm:725
def_61_3e_72            = $8521 = 34081          __words.asm:403
def_61_62_3e_72         = $8545 = 34117          __words.asm:464
def_61_62_63_3e_72      = $8553 = 34131          __words.asm:486
def_61_62_73            = $848C = 33932          __words.asm:199
def_61_6e_64            = $84ED = 34029          __words.asm:324
def_62_3e_61            = $8609 = 34313          __words.asm:737
def_62_3e_63            = $8610 = 34320          __words.asm:747
def_62_3e_72            = $852D = 34093          __words.asm:423
def_62_72_65_61_6b      = $85EE = 34286          __words.asm:684
def_62_73_77_61_70      = $8495 = 33941          __words.asm:208
def_63_21               = $8643 = 34371          __words.asm:833
def_63_2c               = $856F = 34159          __words.asm:536
def_63_3e_61            = $8617 = 34327          __words.asm:759
def_63_3e_62            = $861E = 34334          __words.asm:769
def_63_3e_72            = $8539 = 34105          __words.asm:443
def_63_40               = $8649 = 34377          __words.asm:844
def_63_6f_6e_73_6f_6c_65_2e_63_68_61_72_21 = $8406 = 33798          __words.asm:18
def_63_6f_6e_73_6f_6c_65_2e_68_65_78_21 = $840C = 33804          __words.asm:23
def_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79 = $8412 = 33810          __words.asm:28
def_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65 = $8400 = 33792          __words.asm:13
def_63_6f_70_79         = $8576 = 34166          __words.asm:544
def_66_69_6c_6c         = $8596 = 34198          __words.asm:580
def_68_61_6c_74         = $85A9 = 34217          __words.asm:603
def_6d_6f_64            = $84F7 = 34039          __words.asm:337
def_6e_6f_74            = $849D = 33949          __words.asm:221
def_6f_72               = $8500 = 34048          __words.asm:347
def_70_21               = $865A = 34394          __words.asm:868
def_70_40               = $8651 = 34385          __words.asm:856
def_70_6f_70            = $851A = 34074          __words.asm:391
def_70_75_73_68         = $8514 = 34068          __words.asm:382
def_72_3e_61            = $8527 = 34087          __words.asm:412
def_72_3e_61_62         = $854C = 34124          __words.asm:474
def_72_3e_61_62_63      = $855B = 34139          __words.asm:497
def_72_3e_62            = $8533 = 34099          __words.asm:432
def_72_3e_63            = $853F = 34111          __words.asm:452
def_73_77_61_70         = $85F5 = 34293          __words.asm:704
def_73_79_73_2e_73_74_64_65_78_65_63_6d_61_63_72_6f_72_6f_75_74_69_6e_65 = $85C7 = 34247          __words.asm:640
def_73_79_73_2e_73_74_64_68_65_61_64_65_72_72_6f_75_74_69_6e_65 = $85B0 = 34224          __words.asm:613
def_73_79_73_2e_73_74_64_6d_61_63_72_6f_72_6f_75_74_69_6e_65 = $85C1 = 34241          __words.asm:634
def_73_79_73_2e_76_61_72_69_61_62_6c_65_72_6f_75_74_69_6e_65 = $85DC = 34268          __words.asm:670
def_78_6f_72            = $850A = 34058          __words.asm:360
end_21                  = $862D = 34349          __words.asm:798
end_2b                  = $84EC = 34028          __words.asm:318
end_2b_2b               = $842F = 33839          __words.asm:75
end_2b_2b_2b            = $8436 = 33846          __words.asm:87
end_2d_2d               = $8422 = 33826          __words.asm:52
end_2d_2d_2d            = $8429 = 33833          __words.asm:64
end_31_36_2a            = $8475 = 33909          __words.asm:169
end_32_2a               = $845D = 33885          __words.asm:136
end_32_2f               = $847E = 33918          __words.asm:181
end_34_2a               = $8464 = 33892          __words.asm:146
end_34_2f               = $848B = 33931          __words.asm:193
end_38_2a               = $846C = 33900          __words.asm:157
end_3b                  = $856E = 34158          __words.asm:530
end_40                  = $8636 = 34358          __words.asm:812
end_61_3e_62            = $8601 = 34305          __words.asm:721
end_61_3e_63            = $8608 = 34312          __words.asm:731
end_61_3e_72            = $8526 = 34086          __words.asm:408
end_61_62_3e_72         = $854B = 34123          __words.asm:470
end_61_62_63_3e_72      = $855A = 34138          __words.asm:493
end_62_3e_61            = $860F = 34319          __words.asm:743
end_62_3e_63            = $8616 = 34326          __words.asm:753
end_62_3e_72            = $8532 = 34098          __words.asm:428
end_62_72_65_61_6b      = $85F4 = 34292          __words.asm:689
end_62_73_77_61_70      = $849C = 33948          __words.asm:215
end_63_21               = $8648 = 34376          __words.asm:838
end_63_3e_61            = $861D = 34333          __words.asm:765
end_63_3e_62            = $8624 = 34340          __words.asm:775
end_63_3e_72            = $853E = 34110          __words.asm:448
end_63_40               = $8650 = 34384          __words.asm:850
end_70_21               = $8660 = 34400          __words.asm:873
end_70_40               = $8659 = 34393          __words.asm:862
end_70_6f_70            = $8520 = 34080          __words.asm:397
end_70_75_73_68         = $8519 = 34073          __words.asm:387
end_72_3e_61            = $852C = 34092          __words.asm:417
end_72_3e_61_62         = $8552 = 34130          __words.asm:480
end_72_3e_61_62_63      = $8562 = 34146          __words.asm:504
end_72_3e_62            = $8538 = 34104          __words.asm:437
end_72_3e_63            = $8544 = 34116          __words.asm:457
end_73_77_61_70         = $85FA = 34298          __words.asm:709
start_21                = $8628 = 34344          __words.asm:792
start_2b                = $84EA = 34026          __words.asm:315
start_2b_2b             = $842D = 33837          __words.asm:72
start_2b_2b_2b          = $8433 = 33843          __words.asm:83
start_2d_2d             = $8420 = 33824          __words.asm:49
start_2d_2d_2d          = $8426 = 33830          __words.asm:60
start_31_36_2a          = $8470 = 33904          __words.asm:163
start_32_2a             = $845B = 33883          __words.asm:133
start_32_2f             = $8479 = 33913          __words.asm:177
start_34_2a             = $8461 = 33889          __words.asm:142
start_34_2f             = $8482 = 33922          __words.asm:187
start_38_2a             = $8468 = 33896          __words.asm:152
start_3b                = $856C = 34156          __words.asm:527
start_40                = $8631 = 34353          __words.asm:806
start_61_3e_62          = $85FE = 34302          __words.asm:717
start_61_3e_63          = $8605 = 34309          __words.asm:727
start_61_3e_72          = $8524 = 34084          __words.asm:405
start_61_62_3e_72       = $8548 = 34120          __words.asm:466
start_61_62_63_3e_72    = $8556 = 34134          __words.asm:488
start_62_3e_61          = $860C = 34316          __words.asm:739
start_62_3e_63          = $8613 = 34323          __words.asm:749
start_62_3e_72          = $8530 = 34096          __words.asm:425
start_62_72_65_61_6b    = $85F1 = 34289          __words.asm:686
start_62_73_77_61_70    = $8498 = 33944          __words.asm:210
start_63_21             = $8646 = 34374          __words.asm:835
start_63_3e_61          = $861A = 34330          __words.asm:761
start_63_3e_62          = $8621 = 34337          __words.asm:771
start_63_3e_72          = $853C = 34108          __words.asm:445
start_63_40             = $864C = 34380          __words.asm:846
start_70_21             = $865D = 34397          __words.asm:870
start_70_40             = $8654 = 34388          __words.asm:858
start_70_6f_70          = $851D = 34077          __words.asm:393
start_70_75_73_68       = $8517 = 34071          __words.asm:384
start_72_3e_61          = $852A = 34090          __words.asm:414
start_72_3e_61_62       = $854F = 34127          __words.asm:476
start_72_3e_61_62_63    = $855E = 34142          __words.asm:499
start_72_3e_62          = $8536 = 34102          __words.asm:434
start_72_3e_63          = $8542 = 34114          __words.asm:454
start_73_77_61_70       = $85F8 = 34296          __words.asm:706
variableAddressCompiler = $85DF = 34271          __words.asm:672 (unused)


total time: 0.0087 sec.
no errors
