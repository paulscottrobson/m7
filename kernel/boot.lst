              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-01-05 21:16:51
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	M7 Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstSourcePage = $22 								; first page of 512 byte source pages
0004:         	SourcePageCount = 4 								; number of source pages (32 pages/page)
0200:         	EditPageSize = 512 									; bytes per edit page.
002A:         	FirstCodePage = $22+SourcePageCount*2 				; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: 2689    			dw 		SystemInformation 
              	
8006: 31FC7E  	Boot:	ld 		sp,StackTop							; reset Z80 Stack
8009: F3      			di											; disable interrupts
              		
800A: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
800E: 3E2A    			ld 		a,FirstCodePage 					; get the page to start
8010: CD9380  			call 	PAGEInitialise
              	
8013: 3E00    			ld 		a,0 								; set Mode 0 (standard 48k Spectrum + Sprites)
8015: CDD480  			call 	GFXMode
              	;		jp 		BUFFScan 							; scan the buffers
              	
8018: C31880  	stop:	jp 		stop
              	
              			include "support/multiply.asm" 				; 16 bit multiply (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		5th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
801B:         	MULTMultiply16:
801B: C5      			push 	bc
801C: D5      			push 	de
801D: 44      			ld 		b,h 							; get multipliers in DE/BC
801E: 4D      			ld 		c,l
801F: 210000  			ld 		hl,0 							; zero total
8022:         	__Core__Mult_Loop:
8022: CB41    			bit 	0,c 							; lsb of shifter is non-zero
8024: 2801    			jr 		z,__Core__Mult_Shift
8026: 19      			add 	hl,de 							; add adder to total
8027:         	__Core__Mult_Shift:
8027: CB38    			srl 	b 								; shift BC right.
8029: CB19    			rr 		c
802B: EB      			ex 		de,hl 							; shift DE left
802C: 29      			add 	hl,hl
802D: EB      			ex 		de,hl
802E: 78      			ld 		a,b 							; loop back if BC is nonzero
802F: B1      			or 		c
8030: 20F0    			jr 		nz,__Core__Mult_Loop
8032: D1      			pop 	de
8033: C1      			pop 	bc
8034: C9      			ret
              	
              			include "support/divide.asm" 				; 16 bit divide (not used in kernel)
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		5th January 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
8035:         	DIVDivideMod16:
              	
8035: C5      		push 	bc
8036: 42      		ld 		b,d 				; DE 
8037: 4B      		ld 		c,e
8038: EB      		ex 		de,hl
8039: 210000  		ld 		hl,0
803C: 78      		ld 		a,b
803D: 0608    		ld 		b,8
803F:         	Div16_Loop1:
803F: 17      		rla
8040: ED6A    		adc 	hl,hl
8042: ED52    		sbc 	hl,de
8044: 3001    		jr 		nc,Div16_NoAdd1
8046: 19      		add 	hl,de
8047:         	Div16_NoAdd1:
8047: 10F6    		djnz 	Div16_Loop1
8049: 17      		rla
804A: 2F      		cpl
804B: 47      		ld 		b,a
804C: 79      		ld 		a,c
804D: 48      		ld 		c,b
804E: 0608    		ld 		b,8
8050:         	Div16_Loop2:
8050: 17      		rla
8051: ED6A    		adc 	hl,hl
8053: ED52    		sbc 	hl,de
8055: 3001    		jr 		nc,Div16_NoAdd2
8057: 19      		add 	hl,de
8058:         	Div16_NoAdd2:
8058: 10F6    		djnz 	Div16_Loop2
805A: 17      		rla
805B: 2F      		cpl
805C: 51      		ld 		d,c
805D: 5F      		ld 		e,a
805E: C1      		pop 	bc
805F: C9      		ret
              			
              			
              			include "support/farmemory.asm" 			; far memory routines
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		5th January 2018
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8060:         	FARCompileByte:
8060: F5      			push 	af 									; save byte and HL
8061: E5      			push 	hl
8062: F5      			push 	af 									; save byte
8063: 3A2889  			ld		a,(HerePage) 						; switch to page
8066: CDA580  			call 	PAGESwitch
8069: 2A2689  			ld 		hl,(Here) 							; write to memory location
806C: F1      			pop 	af
806D: 77      			ld 		(hl),a
806E: 23      			inc 	hl 									; bump memory location
806F: 222689  			ld 		(Here),hl 							; write back
8072: CDBE80  			call 	PAGERestore
8075: E1      			pop 	hl 									; restore and exit
8076: F1      			pop 	af
8077: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8078:         	FARCompileWord:
8078: F5      			push 	af 									; save byte and HL
8079: D5      			push 	de
807A: E5      			push 	hl
807B: EB      			ex 		de,hl 								; word into DE
807C: 3A2889  			ld		a,(HerePage) 						; switch to page
807F: CDA580  			call 	PAGESwitch
8082: 2A2689  			ld 		hl,(Here) 							; write to memory location
8085: 73      			ld 		(hl),e
8086: 23      			inc 	hl 	
8087: 72      			ld 		(hl),d
8088: 23      			inc 	hl
8089: 222689  			ld 		(Here),hl 							; write back
808C: CDBE80  			call 	PAGERestore
808F: E1      			pop 	hl
8090: D1      			pop 	de 									; restore and exit
8091: F1      			pop 	af
8092: C9      			ret
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		5th January 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
8093:         	PAGEInitialise:
8093: E5      			push 	hl
8094: ED9256  			db 		$ED,$92,$56							; switch to page A
8097: 3C      			inc 	a
8098: ED9257  			db 		$ED,$92,$57
809B: 3D      			dec 	a
809C: 08      			ex 		af,af' 								; put page in A'
809D: 214889  			ld 		hl,__PAGEStackBase 					; reset the page stack
80A0: 224689  			ld 		(__PAGEStackPointer),hl
80A3: E1      			pop 	hl
80A4: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
80A5:         	PAGESwitch:
80A5: F5      			push 	af
80A6: E5      			push 	hl
              	
80A7: F5      			push 	af 									; save A on stack
80A8: 2A4689  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
80AB: 08      			ex 		af,af'
80AC: 77      			ld 		(hl),a
80AD: 23      			inc 	hl
80AE: 224689  			ld 		(__PAGEStackPointer),hl
              	
80B1: F1      			pop 	af 									; restore new A
80B2: ED9256  			db 		$ED,$92,$56							; switch to page A
80B5: 3C      			inc 	a
80B6: ED9257  			db 		$ED,$92,$57
80B9: 3D      			dec 	a
80BA: 08      			ex 		af,af' 								; put page in A'
              	
80BB: E1      			pop 	hl
80BC: F1      			pop 	af
80BD: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
80BE:         	PAGERestore:
80BE: F5      			push 	af
80BF: E5      			push 	hl
80C0: 2A4689  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
80C3: 2B      			dec 	hl
80C4: 7E      			ld 		a,(hl)
80C5: 224689  			ld 		(__PAGEStackPointer),hl
80C8: ED9256  			db 		$ED,$92,$56							; switch to page A
80CB: 3C      			inc 	a
80CC: ED9257  			db 		$ED,$92,$57
80CF: 3D      			dec 	a
80D0: 08      			ex 		af,af' 								; update A'
80D1: E1      			pop 	hl
80D2: F1      			pop 	af
80D3: C9      			ret
              					
              			include "console/graphics.asm"				; graphic routines
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80D4:         	GFXMode:
80D4: C5      			push 	bc
80D5: D5      			push 	de
80D6: E5      			push 	hl
80D7: 2D      			dec 	l 									; L = 1 mode layer2
80D8: 2808    			jr 		z,__GFXLayer2
80DA: 2D      			dec 	l
80DB: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
80DD: CD1782  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
80E0: 1808    			jr 		__GFXConfigure
              	
80E2:         	__GFXLayer2:
80E2: CD8F82  			call 	GFXInitialiseLayer2
80E5: 1803    			jr 		__GFXConfigure
              	
80E7:         	__GFXLowRes:
80E7: CD4683  			call 	GFXInitialiseLowRes
              	
80EA:         	__GFXConfigure:
80EA: 7D      			ld 		a,l 								; save screen size
80EB: 323289  			ld 		(SIScreenWidth),a
80EE: 7C      			ld 		a,h
80EF: 323689  			ld 		(SIScreenHeight),a
80F2: EB      			ex 		de,hl 								; save driver
80F3: 224489  			ld 		(SIScreenDriver),hl
              	
80F6: 6A      			ld 		l,d 								; put sizes in HL DE
80F7: 2600    			ld 		h,0
80F9: 1600    			ld 		d,0
80FB: CD1B80  			call 	MULTMultiply16 						; multiply to get size and store.
80FE: 223A89  			ld 		(SIScreenSize),hl
              	
8101: E1      			pop 	hl
8102: D1      			pop 	de
8103: C1      			pop 	bc
8104: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
8105:         	GFXWriteCharacter:
8105: F5      			push 	af
8106: C5      			push 	bc
8107: D5      			push 	de
8108: E5      			push 	hl
8109: 011381  			ld 		bc,__GFXWCExit
810C: C5      			push 	bc
810D: ED4B4489			ld 		bc,(SIScreenDriver)
8111: C5      			push 	bc
8112: C9      			ret
8113:         	__GFXWCExit:
8113: E1      			pop 	hl
8114: D1      			pop 	de
8115: C1      			pop 	bc
8116: F1      			pop 	af
8117: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
8118:         	GFXWriteHexWord:
8118: 3E05    			ld 		a,5
811A:         	GFXWriteHexWordA:
811A: C5      			push 	bc
811B: D5      			push 	de
811C: E5      			push 	hl
811D: 4F      			ld 		c,a
811E: 7A      			ld 		a,d
811F: D5      			push 	de
8120: CD2C81  			call 	__GFXWHByte
8123: D1      			pop 	de
8124: 7B      			ld 		a,e
8125: CD2C81  			call	__GFXWHByte
8128: E1      			pop 	hl
8129: D1      			pop 	de
812A: C1      			pop 	bc
812B: C9      			ret
              	
812C:         	__GFXWHByte:
812C: F5      			push 	af
812D: CB0F    			rrc 	a
812F: CB0F    			rrc		a
8131: CB0F    			rrc 	a
8133: CB0F    			rrc 	a
8135: CD3981  			call 	__GFXWHNibble
8138: F1      			pop 	af
8139:         	__GFXWHNibble:
8139: 51      			ld 		d,c
813A: E60F    			and 	15
813C: FE0A    			cp 		10
813E: 3802    			jr 		c,__GFXWHDigit
8140: C607    			add		a,7
8142:         	__GFXWHDigit:
8142: C630    			add 	a,48
8144: 5F      			ld 		e,a
8145: CD0581  			call 	GFXWriteCharacter
8148: 23      			inc 	hl
8149: C9      			ret
              			include "console/keyboard.asm"				; keyboard I/O
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		27th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
814A:         	IOScanKeyboard:
814A: C5      			push 	bc
814B: D5      			push 	de
814C: E5      			push 	hl
              	
814D: 219F81  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
8150: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
8152: 06FE    			ld 		b,$FE
8154: ED78    			in 		a,(c)
8156: CB47    			bit 	0,a
8158: 2005    			jr 		nz,__kr1
815A: 21C781  			ld 		hl,__kr_shift_table
815D: 180B    			jr 		__kr2
815F:         	__kr1:
815F: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
8161: ED78    			in 		a,(c)
8163: CB4F    			bit 	1,a
8165: 2003    			jr 		nz,__kr2
8167: 21C781  			ld 		hl,__kr_symbol_shift_table
816A:         	__kr2:
              	
816A: 1EFE    			ld 		e,$FE 								; scan pattern.
816C: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
816D: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
816F: FEFE    			cp 		$FE
8171: 2808    			jr 		z,___kr4
8173: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
8175: FE7F    			cp 		$7F
8177: 2802    			jr 		z,___kr4
8179: 161F    			ld 		d,$01F 								; check all bits.
817B:         	___kr4:
817B: 43      			ld 		b,e 								; scan the keyboard
817C: 0EFE    			ld 		c,$FE
817E: ED78    			in 		a,(c)
8180: 2F      			cpl 										; make that active high.
8181: A2      			and 	d  									; and with check value.
8182: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
8184: 23      			inc 	hl 									; next set of keyboard characters
8185: 23      			inc 	hl
8186: 23      			inc 	hl
8187: 23      			inc 	hl
8188: 23      			inc 	hl
              	
8189: 7B      			ld 		a,e 								; get pattern
818A: 87      			add 	a,a 								; shift left
818B: F601    			or 		1 									; set bit 1.
818D: 5F      			ld 		e,a
              	
818E: FEFF    			cp 		$FF 								; finished when all 1's.
8190: 20DA    			jr 		nz,__kr3 
8192: AF      			xor 	a
8193: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
8195:         	__kr_keypressed:
8195: 23      			inc 	hl  								; shift right until carry set
8196: 1F      			rra
8197: 30FC    			jr 		nc,__kr_keypressed
8199: 2B      			dec 	hl 									; undo the last inc hl
819A: 7E      			ld 		a,(hl) 								; get the character number.
819B:         	__kr_exit:
819B: E1      			pop 	hl
819C: D1      			pop 	de
819D: C1      			pop 	bc
819E: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
819F:         	__kr_no_shift_table:
819F: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
81A3: 76617364	
81A7: 6667    	
81A9: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
81AD: 74313233	
81B1: 3435    	
81B3: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
81B7: 36706F69	
81BB: 7579    	
81BD: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
81C1: 6820006D	
81C5: 6E62    	
              	
81C7:         	__kr_shift_table:
81C7:         	__kr_symbol_shift_table:
81C7: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
81CB: 2F7E7C5C	
81CF: 7B7D    	
81D1: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
81D5: 3E214023	
81D9: 2425    	
81DB: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
81DF: 26223B00	
81E3: 5D5B    	
81E5: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
81E9: 5E20002E	
81ED: 2C2A    	
              	
81EF: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
81F3: 2F7E7C5C	
81F7: 7B7D    	
81F9: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
81FD: 3E101112	
8201: 1314    	
8203: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8207: 15223B00	
820B: 5D5B    	
820D: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
8211: 5E20002E	
8215: 2C2A    	
              			include "console/screen48k.asm" 			; drivers
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
8217:         	GFXInitialise48k:
8217: F5      			push 	af 									; save registers
8218: C5      			push 	bc
              	
8219: 013B12  			ld 		bc,$123B 							; Layer 2 access port
821C: 3E00    			ld 		a,0 								; disable Layer 2
821E: ED79    			out 	(c),a
8220: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8224: 210040  			ld 		hl,$4000 							; clear pixel memory
8227: 3600    	__cs1:	ld 		(hl),0
8229: 23      			inc 	hl
822A: 7C      			ld 		a,h
822B: FE58    			cp 		$58
822D: 20F8    			jr 		nz,__cs1
822F: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
8231: 23      			inc 	hl
8232: 7C      			ld 		a,h
8233: FE5B    			cp 		$5B
8235: 20F8    			jr 		nz,__cs2	
8237: AF      			xor 	a 									; border off
8238: D3FE    			out 	($FE),a
823A: C1      			pop 	bc
823B: F1      			pop 	af
823C: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
823F: 114382  			ld 		de,GFXPrintCharacter48k
8242: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8243:         	GFXPrintCharacter48k:
8243: F5      			push 	af 									; save registers
8244: C5      			push 	bc
8245: D5      			push 	de
8246: E5      			push 	hl
              	
8247: 43      			ld 		b,e 								; character in B
8248: 7C      			ld 		a,h 								; check range.
8249: FE03    			cp 		3
824B: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
824D: E5      			push 	hl 									; save position.
824E: 7C      			ld 		a,h
824F: C658    			add 	$58
8251: 67      			ld 		h,a
              	
8252: 7A      			ld 		a,d 								; get current colour
8253: E607    			and 	7  									; mask 0..2
8255: F640    			or 		$40  								; make bright
8257: 77      			ld 		(hl),a 								; store it.	
8258: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8259: D5      			push 	de
825A: EB      			ex 		de,hl
825B: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
825C: 7A      			ld 		a,d
825D: E603    			and 	3
825F: 87      			add 	a,a
8260: 87      			add 	a,a
8261: 87      			add 	a,a
8262: F640    			or 		$40
8264: 67      			ld 		h,a
8265: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8266: E5      			push 	hl
8267: 78      			ld 		a,b 								; get character
8268: E67F    			and 	$7F 								; bits 0-6 only.
826A: D620    			sub 	32
826C: 6F      			ld 		l,a 								; put in HL
826D: 2600    			ld 		h,0
826F: 29      			add 	hl,hl 								; x 8
8270: 29      			add 	hl,hl
8271: 29      			add 	hl,hl
8272: ED5B4289			ld 		de,(SIFontBase) 					; add the font base.
8276: 19      			add 	hl,de
8277: EB      			ex 		de,hl 								; put in DE (font address)
8278: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8279: 78      			ld 		a,b
827A: 0608    			ld 		b,8 								; copy 8 characters
827C: 0E00    			ld 		c,0 								; XOR value 0
827E: CB7F    			bit 	7,a 								; is the character reversed
8280: 2801    			jr 		z,__ZXWCCopy
8282: 0D      			dec 	c 									; C is the XOR mask now $FF
8283:         	__ZXWCCopy:
8283: 1A      			ld 		a,(de)								; get font data
8284: A9      			xor 	c 									; xor with reverse
8285: 77      			ld 		(hl),a 								; write back
8286: 24      			inc 	h 									; bump pointers
8287: 13      			inc 	de
8288: 10F9    			djnz 	__ZXWCCopy 							; do B times.
828A:         	__ZXWCExit:
828A: E1      			pop 	hl 									; restore and exit
828B: D1      			pop 	de
828C: C1      			pop 	bc
828D: F1      			pop 	af
828E: C9      			ret
              			include "console/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
828F:         	GFXInitialiseLayer2:
828F: F5      			push 	af
8290: C5      			push 	bc
8291: D5      			push 	de
8292: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8296: 1E02    			ld 		e,2 								; 3 banks to erase
8298:         	L2PClear:
8298: 7B      			ld 		a,e 								; put bank number in bits 6/7
8299: CB0F    			rrc 	a
829B: CB0F    			rrc 	a
829D: F603    			or 		2+1 								; shadow on, visible, enable write paging
829F: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82A2: ED79    			out 	(c),a
82A4: 210040  			ld 		hl,$4000 							; erase the bank to $00 
82A7:         	L2PClearBank: 										; assume default palette :)
82A7: 2B      			dec 	hl
82A8: 3600    			ld 		(hl),$00
82AA: 7C      			ld 		a,h
82AB: B5      			or 		l
82AC: 20F9    			jr		nz,L2PClearBank
82AE: 1D      			dec 	e
82AF: F29882  			jp 		p,L2PClear
              	
82B2: AF      			xor 	a
82B3: D3FE    			out 	($FE),a
              	
82B5: D1      			pop 	de
82B6: C1      			pop 	bc
82B7: F1      			pop 	af
82B8: 212018  			ld 		hl,$1820 							; still 32 x 24 	
82BB: 11BF82  			ld 		de,GFXPrintCharacterLayer2
82BE: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
82BF:         	GFXPrintCharacterLayer2:
82BF: F5      			push 	af
82C0: C5      			push 	bc
82C1: D5      			push 	de
82C2: E5      			push 	hl
82C3: DDE5    			push 	ix
              	
82C5: 43      			ld 		b,e 								; save A temporarily
82C6: 78      			ld 		a,b
82C7: E67F    			and 	$7F
82C9: FE20    			cp 		32
82CB: 3872    			jr 		c,__L2Exit 							; check char in range
82CD: 7C      			ld 		a,h
82CE: FE03    			cp 		3
82D0: 306D    			jr 		nc,__L2Exit 						; check position in range
82D2: 78      			ld 		a,b
              	
82D3: F5      			push 	af 	
82D4: AF      			xor 	a 									; convert colour in C to palette index
82D5: CB42    			bit 	0,d 								; (assumes standard palette)
82D7: 2802    			jr 		z,__L2Not1
82D9: F603    			or 		$03
82DB:         	__L2Not1:
82DB: CB52    			bit 	2,d
82DD: 2802    			jr 		z,__L2Not2
82DF: F61C    			or 		$1C
82E1:         	__L2Not2:
82E1: CB4A    			bit 	1,d
82E3: 2802    			jr 		z,__L2Not3
82E5: F6C0    			or 		$C0
82E7:         	__L2Not3:
82E7: 4F      			ld 		c,a 								; C is foreground
82E8: 0600    			ld 		b,0									; B is xor flipper, initially zero
82EA: F1      			pop 	af 									; restore char
              	
82EB: E5      			push 	hl
82EC: CB7F    			bit 	7,a 								; adjust background bit on bit 7
82EE: 2802    			jr 		z,__L2NotCursor
82F0: 06FF    			ld 		b,$FF 								; light grey is cursor
82F2:         	__L2NotCursor:
82F2: E67F    			and 	$7F 								; offset from space
82F4: D620    			sub 	$20
82F6: 6F      			ld 		l,a 								; put into HL
82F7: 2600    			ld 		h,0
82F9: 29      			add 	hl,hl 								; x 8
82FA: 29      			add 	hl,hl
82FB: 29      			add 	hl,hl
              	
82FC: E5      			push 	hl 									; transfer to IX
82FD: DDE1    			pop 	ix
82FF: E1      			pop 	hl
              	
8300: C5      			push 	bc 									; add the font base to it.
8301: ED4B4289			ld 		bc,(SIFontBase)
8305: DD09    			add 	ix,bc
8307: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8308: C5      			push 	bc
8309: 7C      			ld  	a,h 								; this is the page number.
830A: CB0F    			rrc 	a
830C: CB0F    			rrc 	a
830E: E6C0    			and 	$C0 								; in bits 6 & 7
8310: F603    			or 		$03 								; shadow on, visible, enable write pagin.
8312: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8315: ED79    			out 	(c),a
8317: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8318: EB      			ex 		de,hl
8319: 6B      			ld 		l,e
831A: 2600    			ld 		h,0
831C: 29      			add 	hl,hl 								
831D: 29      			add 	hl,hl
831E: 29      			add 	hl,hl
831F: CB24    			sla 	h
8321: CB24    			sla 	h
8323: CB24    			sla 	h
              	
8325: 1E08    			ld 		e,8 								; do 8 rows
8327:         	__L2Outer:
8327: E5      			push 	hl 									; save start
8328: 1608    			ld 		d,8 								; do 8 columns
832A: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
832D: A8      			xor 	b 									; maybe flip it ?
832E: DD23    			inc 	ix
8330:         	__L2Loop:
8330: 3600    			ld 		(hl),0 								; background
8332: 87      			add 	a,a 								; shift pattern left
8333: 3001    			jr 		nc,__L2NotSet
8335: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8336:         	__L2NotSet:
8336: 23      			inc 	hl
8337: 15      			dec 	d 									; do a row
8338: 20F6    			jr 		nz,	__L2Loop
833A: E1      			pop 	hl 									; restore, go 256 bytes down.
833B: 24      			inc 	h
833C: 1D      			dec 	e 									; do 8 rows
833D: 20E8    			jr 		nz,__L2Outer	
833F:         	__L2Exit:
833F: DDE1    			pop 	ix
8341: E1      			pop 	hl
8342: D1      			pop 	de
8343: C1      			pop 	bc
8344: F1      			pop 	af
8345: C9      			ret
              			include "console/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8346:         	GFXInitialiseLowRes:
8346: F5      			push 	af
8347: C5      			push 	bc
8348: D5      			push 	de
              	
8349: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
834D: AF      			xor 	a 									; layer 2 off.
834E: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8351: ED79    			out 	(c),a
              	
8353: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8356: 110060  			ld 		de,$6000
8359:         	LowClearScreen: 									; assume default palette :)
8359: AF      			xor 	a
835A: 77      			ld 		(hl),a
835B: 12      			ld 		(de),a
835C: 23      			inc 	hl
835D: 13      			inc 	de
835E: 7C      			ld 		a,h
835F: FE58    			cp 		$58
8361: 20F6    			jr		nz,LowClearScreen
8363: AF      			xor 	a
8364: D3FE    			out 	($FE),a
8366: D1      			pop 	de
8367: C1      			pop 	bc
8368: F1      			pop 	af
8369: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
836C: 117083  			ld 		de,GFXPrintCharacterLowRes
836F: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
8370:         	GFXPrintCharacterLowRes:
8370: F5      			push 	af
8371: C5      			push 	bc
8372: D5      			push 	de
8373: E5      			push 	hl
8374: DDE5    			push 	ix
              	
8376: 43      			ld 		b,e 								; save character in B
8377: 7B      			ld 		a,e
8378: E67F    			and 	$7F
837A: FE20    			cp 		32
837C: 3866    			jr 		c,__LPExit
              	
837E: 29      			add 	hl,hl
837F: 29      			add 	hl,hl
8380: 7C      			ld	 	a,h 								; check in range 192*4 = 768
8381: FE03    			cp 		3
8383: 305F    			jr 		nc,__LPExit
              	
8385: 7A      			ld 		a,d 								; only lower 3 bits of colour
8386: E607    			and 	7
8388: 4F      			ld 		c,a 								; C is foreground
              	
8389: E5      			push 	hl
838A: 78      			ld 		a,b 								; get char back
838B: 0600    			ld 		b,0 								; B = no flip colour.
838D: CB7F    			bit 	7,a
838F: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
8391: 05      			dec 	b
8392:         	__LowNotReverse:
8392: E67F    			and 	$7F 								; offset from space
8394: D620    			sub 	$20
8396: 6F      			ld 		l,a 								; put into HL
8397: 2600    			ld 		h,0
8399: 29      			add 	hl,hl 								; x 8
839A: 29      			add 	hl,hl
839B: 29      			add 	hl,hl
              	
839C: E5      			push 	hl 									; transfer to IX
839D: DDE1    			pop 	ix
              	
839F: C5      			push 	bc 									; add the font base to it.
83A0: ED4B4289			ld 		bc,(SIFontBase)
83A4: DD09    			add 	ix,bc
83A6: C1      			pop 	bc
83A7: E1      			pop 	hl
83A8: EB      			ex 		de,hl
83A9: 7B      			ld 		a,e 								; put DE => HL
83AA: E6C0    			and 	192 								; these are part of Y
83AC: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
83AD: 62      			ld 		h,d		
83AE: 29      			add 	hl,hl
83AF: 29      			add 	hl,hl
83B0: 29      			add 	hl,hl
83B1: 29      			add 	hl,hl
83B2: CBF4    			set 	6,h 								; put into $4000 range
              	
83B4: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
83B6: A3      			and 	e 									; and with E, gives X position
83B7: 87      			add 	a,a 								; now multiplied by 8.
83B8: 5F      			ld 		e,a 								; DE is x offset.
83B9: 1600    			ld 		d,0  
              	
83BB: 19      			add 	hl,de
83BC: 7C      			ld 		a,h
83BD: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
83BF: 3804    			jr 		c,__LowNotLower2
83C1: 110008  			ld 		de,$0800
83C4: 19      			add 	hl,de
83C5:         	__LowNotLower2:
83C5: 1E08    			ld 		e,8 								; do 8 rows
83C7:         	__LowOuter:
83C7: E5      			push 	hl 									; save start
83C8: 1608    			ld 		d,8 								; do 8 columns
83CA: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
83CD: A8      			xor 	b
83CE: DD23    			inc 	ix
83D0:         	__LowLoop:
83D0: 3600    			ld 		(hl),0 								; background
83D2: 87      			add 	a,a 								; shift pattern left
83D3: 3001    			jr 		nc,__LowNotSet
83D5: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83D6:         	__LowNotSet:
83D6: 2C      			inc 	l
83D7: 15      			dec 	d 									; do a row
83D8: 20F6    			jr 		nz,	__LowLoop
83DA: E1      			pop 	hl 									; restore, go 256 bytes down.
83DB: D5      			push 	de
83DC: 118000  			ld 		de,128
83DF: 19      			add 	hl,de
83E0: D1      			pop 	de
83E1: 1D      			dec 	e 									; do 8 rows
83E2: 20E3    			jr 		nz,__LowOuter	
83E4:         	__LPExit:
83E4: DDE1    			pop 	ix
83E6: E1      			pop 	hl
83E7: D1      			pop 	de
83E8: C1      			pop 	bc
83E9: F1      			pop 	af
83EA: C9      			ret
              	
              			include "temp/__words.asm"					; vocabulary file.
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		console.asm
              	;		Purpose:	Console words.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; ========= console.setmode word =========
83EB:         	def_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65:
83EB: CD9D85  	    call compileCallToSelf
83EE: C3D480  			jp 		GFXMode
              	
              	; ========= console.char! word =========
83F1:         	def_63_6f_6e_73_6f_6c_65_2e_63_68_61_72_21:
83F1: CD9D85  	    call compileCallToSelf
83F4: C30581  			jp 		GFXWriteCharacter
              	
              	; ========= console.hex! word =========
83F7:         	def_63_6f_6e_73_6f_6c_65_2e_68_65_78_21:
83F7: CD9D85  	    call compileCallToSelf
83FA: C31881  			jp 		GFXWriteHexWord
              	
              	; ========= console.inkey word =========
83FD:         	def_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79:
83FD: CD9D85  	    call compileCallToSelf
8400: EB      			ex 		de,hl
8401: CD4A81  			call 	IOScanKeyboard 						; read keyboard
8404: 6F      			ld 		l,a
8405: 2600    			ld 		h,$00
8407: C9      			ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		unary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Unary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= -- xmacro =========
8408:         	def_2d_2d:
8408: CDAC85  	    call compileExecutableCopySelf
840B:         	start_2d_2d:
840B: 01      	    db end_2d_2d-start_2d_2d-1
840C: 2B      			dec 	hl
840D:         	end_2d_2d:
840D: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= --- xmacro =========
840E:         	def_2d_2d_2d:
840E: CDAC85  	    call compileExecutableCopySelf
8411:         	start_2d_2d_2d:
8411: 02      	    db end_2d_2d_2d-start_2d_2d_2d-1
8412: 2B      			dec 	hl
8413: 2B      			dec 	hl
8414:         	end_2d_2d_2d:
8414: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= ++ xmacro =========
8415:         	def_2b_2b:
8415: CDAC85  	    call compileExecutableCopySelf
8418:         	start_2b_2b:
8418: 01      	    db end_2b_2b-start_2b_2b-1
8419: 23      			inc 	hl
841A:         	end_2b_2b:
841A: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= +++ xmacro =========
841B:         	def_2b_2b_2b:
841B: CDAC85  	    call compileExecutableCopySelf
841E:         	start_2b_2b_2b:
841E: 02      	    db end_2b_2b_2b-start_2b_2b_2b-1
841F: 23      			inc 	hl
8420: 23      			inc 	hl
8421:         	end_2b_2b_2b:
8421: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= 0- word =========
8422:         	def_30_2d:
8422: CD9D85  	    call compileCallToSelf
8425:         	__negate:
8425: 7C      			ld 		a,h
8426: 2F      			cpl
8427: 67      			ld 		h,a
8428: 7D      			ld 		a,l
8429: 2F      			cpl
842A: 6F      			ld 		l,a
842B: 23      			inc 	hl
842C: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= 0< word =========
842D:         	def_30_3c:
842D: CD9D85  	    call compileCallToSelf
8430: CB7C    			bit 	7,h
8432: 210000  			ld 		hl,$0000
8435: C8      			ret 	z
8436: 2B      			dec 	hl
8437: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= 0= word =========
8438:         	def_30_3d:
8438: CD9D85  	    call compileCallToSelf
843B: 7C      			ld 		a,h
843C: B5      			or 		l
843D: 210000  			ld 		hl,$0000
8440: C0      			ret 	nz
8441: 2B      			dec 	hl
8442: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= 2* xmacro =========
8443:         	def_32_2a:
8443: CDAC85  	    call compileExecutableCopySelf
8446:         	start_32_2a:
8446: 01      	    db end_32_2a-start_32_2a-1
8447: 29      			add 	hl,hl
8448:         	end_32_2a:
8448: C9      	    ret
              	
              	; ========= 4* xmacro =========
8449:         	def_34_2a:
8449: CDAC85  	    call compileExecutableCopySelf
844C:         	start_34_2a:
844C: 02      	    db end_34_2a-start_34_2a-1
844D: 29      			add 	hl,hl
844E: 29      			add 	hl,hl
844F:         	end_34_2a:
844F: C9      	    ret
              	
              	; ========= 8* xmacro =========
8450:         	def_38_2a:
8450: CDAC85  	    call compileExecutableCopySelf
8453:         	start_38_2a:
8453: 03      	    db end_38_2a-start_38_2a-1
8454: 29      			add 	hl,hl
8455: 29      			add 	hl,hl
8456: 29      			add 	hl,hl
8457:         	end_38_2a:
8457: C9      	    ret
              	
              	; ========= 16* xmacro =========
8458:         	def_31_36_2a:
8458: CDAC85  	    call compileExecutableCopySelf
845B:         	start_31_36_2a:
845B: 04      	    db end_31_36_2a-start_31_36_2a-1
845C: 29      			add 	hl,hl
845D: 29      			add 	hl,hl
845E: 29      			add 	hl,hl
845F: 29      			add 	hl,hl
8460:         	end_31_36_2a:
8460: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= 2/ xmacro =========
8461:         	def_32_2f:
8461: CDAC85  	    call compileExecutableCopySelf
8464:         	start_32_2f:
8464: 04      	    db end_32_2f-start_32_2f-1
8465: CB2C    			sra 	h
8467: CB1D    			rr 		l
8469:         	end_32_2f:
8469: C9      	    ret
              	
              	; ========= 4/ xmacro =========
846A:         	def_34_2f:
846A: CDAC85  	    call compileExecutableCopySelf
846D:         	start_34_2f:
846D: 08      	    db end_34_2f-start_34_2f-1
846E: CB2C    			sra 	h
8470: CB1D    			rr 		l
8472: CB2C    			sra 	h
8474: CB1D    			rr 		l
8476:         	end_34_2f:
8476: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= abs word =========
8477:         	def_61_62_73:
8477: CD9D85  	    call compileCallToSelf
847A: CB7C    			bit 	7,h
847C: C8      			ret		z
847D: C32584  			jp 		__negate
              	
              	; ***************************************************************************************
              	
              	; ========= bswap xmacro =========
8480:         	def_62_73_77_61_70:
8480: CDAC85  	    call compileExecutableCopySelf
8483:         	start_62_73_77_61_70:
8483: 03      	    db end_62_73_77_61_70-start_62_73_77_61_70-1
8484: 7D      			ld 		a,l
8485: 6C      			ld 		l,h
8486: 67      			ld 		h,a
8487:         	end_62_73_77_61_70:
8487: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= not word =========
8488:         	def_6e_6f_74:
8488: CD9D85  	    call compileCallToSelf
848B: 7C      			ld 		a,h
848C: 2F      			cpl
848D: 67      			ld 		h,a
848E: 7D      			ld 		a,l
848F: 2F      			cpl
8490: 6F      			ld 		l,a
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		binary.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Binary operators (A ? B -> A)
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	
              	; ========= < word =========
8491:         	def_3c:
8491: CD9D85  	    call compileCallToSelf
8494: 7C      		ld 		a,h 								 	; check if signs different.
8495: AA      		xor 	d
8496: 87      		add 	a,a 									; CS if different
8497: 3004    		jr 		nc,__less_samesign
8499: 7A      		ld 		a,d 									; different. set CS to sign of B
849A: 87      		add 	a,a 									; if set (negative) B must be < A as A is +ve
849B: 1805    		jr 		__less_returnc
849D:         	__less_samesign:
849D: D5      		push 	de 										; save DE
849E: EB      		ex 		de,hl 									; -1 if B < A
849F: ED52    		sbc 	hl,de 									; calculate B - A , hencs CS if < (Carry clear by add a,a)
84A1: D1      		pop 	de 										; restore DE
84A2:         	__less_returnc:
84A2: 3E00    		ld 		a,0 									; A 0
84A4: DE00    		sbc 	a,0 									; A $FF if CS.
84A6: 6F      		ld 		l,a 									; put in HL
84A7: 67      		ld 		h,a
84A8: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= = word =========
84A9:         	def_3d:
84A9: CD9D85  	    call compileCallToSelf
84AC: 7C      		ld 		a,h 									; H = H ^ D
84AD: AA      		xor 	d
84AE: 67      		ld 		h,a
84AF: 7D      		ld 		a,l 									; A = (L ^ E) | (H ^ D)
84B0: B4      		or 		h 										; if A == 0 they are the same.
84B1: 210000  		ld 		hl,$0000 								; return 0 if different
84B4: C0      		ret 	nz
84B5: 2B      		dec 	hl 										; return -1
84B6: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= - word =========
84B7:         	def_2d:
84B7: CD9D85  	    call compileCallToSelf
84BA: D5      		push 	de 										; save DE
84BB: EB      		ex 		de,hl 									; HL = B, DE = A
84BC: AF      		xor 	a  										; clear carry
84BD: ED52    		sbc 	hl,de 									; calculate B-A
84BF: D1      		pop 	de 										; restore DE
84C0: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= * word =========
84C1:         	def_2a:
84C1: CD9D85  	    call compileCallToSelf
84C4: C31B80  		jp  	MULTMultiply16
              	
              	; ***************************************************************************************
              	
              	; ========= / word =========
84C7:         	def_2f:
84C7: CD9D85  	    call compileCallToSelf
84CA: D5      		push 	de
84CB: CD3580  		call 	DIVDivideMod16
84CE: EB      		ex 		de,hl
84CF: D1      		pop 	de
84D0: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= + xmacro =========
84D1:         	def_2b:
84D1: CDAC85  	    call compileExecutableCopySelf
84D4:         	start_2b:
84D4: 01      	    db end_2b-start_2b-1
84D5: 19      		add 	hl,de
84D6:         	end_2b:
84D6: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= and word =========
84D7:         	def_61_6e_64:
84D7: CD9D85  	    call compileCallToSelf
84DA: 7C      		ld 		a,h
84DB: A2      		and 	d
84DC: 67      		ld 		h,a
84DD: 7D      		ld 		a,l
84DE: A3      		and 	e
84DF: 6F      		ld 		l,a
84E0: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= mod word =========
84E1:         	def_6d_6f_64:
84E1: CD9D85  	    call compileCallToSelf
84E4: D5      		push 	de
84E5: CD3580  		call 	DIVDivideMod16
84E8: D1      		pop 	de
84E9: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= or word =========
84EA:         	def_6f_72:
84EA: CD9D85  	    call compileCallToSelf
84ED: 7C      		ld 		a,h
84EE: B2      		or 		d
84EF: 67      		ld 		h,a
84F0: 7D      		ld 		a,l
84F1: B3      		or 		e
84F2: 6F      		ld 		l,a
84F3: C9      		ret
              	
              	; ***************************************************************************************
              	
              	; ========= xor word =========
84F4:         	def_78_6f_72:
84F4: CD9D85  	    call compileCallToSelf
84F7: 7C      		ld 		a,h
84F8: AA      		xor 	d
84F9: 67      		ld 		h,a
84FA: 7D      		ld 		a,l
84FB: AB      		xor 	e
84FC: 6F      		ld 		l,a
84FD: C9      		ret
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		stack.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Stack words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= push macro =========
84FE:         	def_70_75_73_68:
84FE: CDAB85  	    call compileCopySelf
8501:         	start_70_75_73_68:
8501: 01      	    db end_70_75_73_68-start_70_75_73_68-1
8502: E5      		push 	hl
8503:         	end_70_75_73_68:
8503: C9      	    ret
              	
              	; ========= pop macro =========
8504:         	def_70_6f_70:
8504: CDAB85  	    call compileCopySelf
8507:         	start_70_6f_70:
8507: 02      	    db end_70_6f_70-start_70_6f_70-1
8508: EB      		ex 		de,hl
8509: E1      		pop 	hl
850A:         	end_70_6f_70:
850A: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= a>r macro =========
850B:         	def_61_3e_72:
850B: CDAB85  	    call compileCopySelf
850E:         	start_61_3e_72:
850E: 01      	    db end_61_3e_72-start_61_3e_72-1
850F: E5      		push 	hl
8510:         	end_61_3e_72:
8510: C9      	    ret
              	
              	; ========= r>a macro =========
8511:         	def_72_3e_61:
8511: CDAB85  	    call compileCopySelf
8514:         	start_72_3e_61:
8514: 01      	    db end_72_3e_61-start_72_3e_61-1
8515: E1      		pop 	hl
8516:         	end_72_3e_61:
8516: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= b>r macro =========
8517:         	def_62_3e_72:
8517: CDAB85  	    call compileCopySelf
851A:         	start_62_3e_72:
851A: 01      	    db end_62_3e_72-start_62_3e_72-1
851B: D5      		push 	de
851C:         	end_62_3e_72:
851C: C9      	    ret
              	
              	; ========= r>b macro =========
851D:         	def_72_3e_62:
851D: CDAB85  	    call compileCopySelf
8520:         	start_72_3e_62:
8520: 01      	    db end_72_3e_62-start_72_3e_62-1
8521: D1      		pop 	de
8522:         	end_72_3e_62:
8522: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c>r macro =========
8523:         	def_63_3e_72:
8523: CDAB85  	    call compileCopySelf
8526:         	start_63_3e_72:
8526: 01      	    db end_63_3e_72-start_63_3e_72-1
8527: C5      		push 	bc
8528:         	end_63_3e_72:
8528: C9      	    ret
              	
              	; ========= r>c macro =========
8529:         	def_72_3e_63:
8529: CDAB85  	    call compileCopySelf
852C:         	start_72_3e_63:
852C: 01      	    db end_72_3e_63-start_72_3e_63-1
852D: C1      		pop 	bc
852E:         	end_72_3e_63:
852E: C9      	    ret
              	
              	
              	; ***************************************************************************************
              	
              	; ========= ab>r macro =========
852F:         	def_61_62_3e_72:
852F: CDAB85  	    call compileCopySelf
8532:         	start_61_62_3e_72:
8532: 02      	    db end_61_62_3e_72-start_61_62_3e_72-1
8533: D5      		push 	de
8534: E5      		push 	hl
8535:         	end_61_62_3e_72:
8535: C9      	    ret
              	
              	; ========= r>ab macro =========
8536:         	def_72_3e_61_62:
8536: CDAB85  	    call compileCopySelf
8539:         	start_72_3e_61_62:
8539: 02      	    db end_72_3e_61_62-start_72_3e_61_62-1
853A: E1      		pop 	hl
853B: D1      		pop 	de
853C:         	end_72_3e_61_62:
853C: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= abc>r macro =========
853D:         	def_61_62_63_3e_72:
853D: CDAB85  	    call compileCopySelf
8540:         	start_61_62_63_3e_72:
8540: 03      	    db end_61_62_63_3e_72-start_61_62_63_3e_72-1
8541: C5      		push 	bc
8542: D5      		push 	de
8543: E5      		push 	hl
8544:         	end_61_62_63_3e_72:
8544: C9      	    ret
              	
              	; ========= r>abc macro =========
8545:         	def_72_3e_61_62_63:
8545: CDAB85  	    call compileCopySelf
8548:         	start_72_3e_61_62_63:
8548: 03      	    db end_72_3e_61_62_63-start_72_3e_61_62_63-1
8549: E1      		pop 	hl
854A: D1      		pop 	de
854B: C1      		pop 	bc
854C:         	end_72_3e_61_62_63:
854C: C9      	    ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		miscellany.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Miscellaneous words
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= , word =========
854D:         	def_2c:
854D: CD9D85  	    call compileCallToSelf
8550: C37880  			jp 		FARCompileWord
              	
              	; ***************************************************************************************
              	
              	; ========= ; macro =========
8553:         	def_3b:
8553: CDAB85  	    call compileCopySelf
8556:         	start_3b:
8556: 01      	    db end_3b-start_3b-1
8557: C9      			ret
8558:         	end_3b:
8558: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c, word =========
8559:         	def_63_2c:
8559: CD9D85  	    call compileCallToSelf
855C: 7D      			ld 		a,l
855D: C37880  			jp 		FARCompileWord
              	
              	; ***************************************************************************************
              	
              	; ========= copy word =========
8560:         	def_63_6f_70_79:
8560: CD9D85  	    call compileCallToSelf
8563: 78      			ld 		a,b 								; exit if C = 0
8564: B1      			or 		c
8565: C8      			ret 	z
              	
8566: C5      			push 	bc 									; BC count
8567: D5      			push 	de 									; DE target
8568: E5      			push 	hl 									; HL source
              	
8569: AF      			xor 	a 									; Clear C
856A: ED52    			sbc 	hl,de 								; check overlap ?
856C: 300B    			jr 		nc,__copy_gt_count 					; if source after target
856E: 19      			add 	hl,de 								; undo subtract
              	
856F: 09      			add 	hl,bc 								; add count to HL + DE
8570: EB      			ex 		de,hl
8571: 09      			add 	hl,bc
8572: EB      			ex 		de,hl
8573: 1B      			dec 	de 									; dec them, so now at the last byte to copy
8574: 2B      			dec 	hl
8575: EDB8    			lddr 										; do it backwards
8577: 1803    			jr 		__copy_exit
              	
8579:         	__copy_gt_count:
8579: 19      			add 	hl,de 								; undo subtract
857A: EDB0    			ldir										; do the copy
857C:         	__copy_exit:
857C: E1      			pop 	hl 									; restore registers
857D: D1      			pop 	de
857E: C1      			pop 	bc
857F: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= fill word =========
8580:         	def_66_69_6c_6c:
8580: CD9D85  	    call compileCallToSelf
8583: 78      			ld 		a,b 								; exit if C = 0
8584: B1      			or 		c
8585: C8      			ret 	z
              	
8586: C5      			push 	bc 									; BC count
8587: D5      			push 	de 									; DE target, L byte
8588:         	__fill_loop:
8588: 7D      			ld 		a,l 								; copy a byte
8589: 12      			ld 		(de),a
858A: 13      			inc 	de 									; bump pointer
858B: 0B      			dec 	bc 									; dec counter and loop
858C: 78      			ld 		a,b
858D: B1      			or 		c
858E: 20F8    			jr 		nz,__fill_loop
8590: D1      			pop 	de 									; restore
8591: C1      			pop 	bc
8592: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= halt word =========
8593:         	def_68_61_6c_74:
8593: CD9D85  	    call compileCallToSelf
8596:         	__halt_loop:
8596: F3      			di
8597: 76      			halt
8598: 18FC    			jr 		__halt_loop
              	
              	; ***************************************************************************************
              	
              	; ========= sys.stdheaderroutine word =========
859A:         	def_73_79_73_2e_73_74_64_68_65_61_64_65_72_72_6f_75_74_69_6e_65:
859A: CD9D85  	    call compileCallToSelf
              	
              	;
              	;		The header routine for normal code - compiles a call to the address immediately
              	;		following the 'call' to this routine.
              	;
859D:         	compileCallToSelf:
859D: E3      			ex 		(sp),hl 							; get the routine addr into HL, old HL on TOS.
              	
859E: 3ECD    			ld 		a,$CD 								; Z80 Call
85A0: CD6080  			call 	FARCompileByte
85A3: CD7880  			call 	FARCompileWord
              	
85A6: E1      			pop 	hl 									; restore HL and exit
85A7: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= sys.stdmacroroutine word =========
85A8:         	def_73_79_73_2e_73_74_64_6d_61_63_72_6f_72_6f_75_74_69_6e_65:
85A8: CD9D85  	    call compileCallToSelf
              	
              	;
              	;		Macro code - compiles the code immediately following the call to this routine.
              	;		First byte is the length, subsequent is data.
              	;
              	
85AB:         	compileCopySelf: 									; different addresses to tell executable ones.
85AB: 00      			nop
85AC:         	compileExecutableCopySelf:
85AC: E3      			ex 		(sp),hl 							; routine start into HL, old HL on TOS
85AD: C5      			push 	bc 									; save BC
85AE: 46      			ld 		b,(hl)								; get count
85AF: 23      			inc 	hl
85B0:         	__copyMacroCode:
85B0: 7E      			ld 		a,(hl)								; do next byte
85B1: CD6080  			call 	FARCompileByte
85B4: 23      			inc 	hl
85B5: 10F9    			djnz 	__copyMacroCode
85B7: C1      			pop 	bc 									; restore and exit.
85B8: E1      			pop 	hl
85B9: C9      			ret
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		register.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Register manipulation
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= swap xmacro =========
85BA:         	def_73_77_61_70:
85BA: CDAC85  	    call compileExecutableCopySelf
85BD:         	start_73_77_61_70:
85BD: 01      	    db end_73_77_61_70-start_73_77_61_70-1
85BE: EB      			ex 		de,hl
85BF:         	end_73_77_61_70:
85BF: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= a>b xmacro =========
85C0:         	def_61_3e_62:
85C0: CDAC85  	    call compileExecutableCopySelf
85C3:         	start_61_3e_62:
85C3: 02      	    db end_61_3e_62-start_61_3e_62-1
85C4: 54      			ld 		d,h
85C5: 5D      			ld 		e,l
85C6:         	end_61_3e_62:
85C6: C9      	    ret
              	
              	; ========= a>c xmacro =========
85C7:         	def_61_3e_63:
85C7: CDAC85  	    call compileExecutableCopySelf
85CA:         	start_61_3e_63:
85CA: 02      	    db end_61_3e_63-start_61_3e_63-1
85CB: 44      			ld 		b,h
85CC: 4D      			ld 		c,l
85CD:         	end_61_3e_63:
85CD: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= b>a xmacro =========
85CE:         	def_62_3e_61:
85CE: CDAC85  	    call compileExecutableCopySelf
85D1:         	start_62_3e_61:
85D1: 02      	    db end_62_3e_61-start_62_3e_61-1
85D2: 62      			ld 		h,d
85D3: 6B      			ld 		l,e
85D4:         	end_62_3e_61:
85D4: C9      	    ret
              	
              	; ========= b>c xmacro =========
85D5:         	def_62_3e_63:
85D5: CDAC85  	    call compileExecutableCopySelf
85D8:         	start_62_3e_63:
85D8: 02      	    db end_62_3e_63-start_62_3e_63-1
85D9: 42      			ld 		b,d
85DA: 4B      			ld 		c,e
85DB:         	end_62_3e_63:
85DB: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c>a xmacro =========
85DC:         	def_63_3e_61:
85DC: CDAC85  	    call compileExecutableCopySelf
85DF:         	start_63_3e_61:
85DF: 02      	    db end_63_3e_61-start_63_3e_61-1
85E0: 60      			ld 		h,b
85E1: 69      			ld 		l,c
85E2:         	end_63_3e_61:
85E2: C9      	    ret
              	
              	; ========= c>b xmacro =========
85E3:         	def_63_3e_62:
85E3: CDAC85  	    call compileExecutableCopySelf
85E6:         	start_63_3e_62:
85E6: 02      	    db end_63_3e_62-start_63_3e_62-1
85E7: 50      			ld 		d,b
85E8: 59      			ld 		e,c
85E9:         	end_63_3e_62:
85E9: C9      	    ret
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		memory.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Memory operators
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ========= ! xmacro =========
85EA:         	def_21:
85EA: CDAC85  	    call compileExecutableCopySelf
85ED:         	start_21:
85ED: 04      	    db end_21-start_21-1
85EE: 73      			ld 		(hl),e
85EF: 23      			inc 	hl
85F0: 72      			ld 		(hl),d
85F1: 2B      			dec 	hl
85F2:         	end_21:
85F2: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= @ xmacro =========
85F3:         	def_40:
85F3: CDAC85  	    call compileExecutableCopySelf
85F6:         	start_40:
85F6: 04      	    db end_40-start_40-1
85F7: 7E      			ld 		a,(hl)
85F8: 23      			inc 	hl
85F9: 66      			ld		h,(hl)
85FA: 6F      			ld		l,a
85FB:         	end_40:
85FB: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= +! word =========
85FC:         	def_2b_21:
85FC: CD9D85  	    call compileCallToSelf
85FF: 7E      			ld 		a,(hl)
8600: 83      			add 	a,e
8601: 77      			ld 		(hl),a
8602: 23      			inc 	hl
8603: 7E      			ld 		a,(hl)
8604: 8A      			adc 	a,d
8605: 77      			ld 		(hl),a
8606: 2B      			dec 	hl
8607: C9      			ret
              	
              	; ***************************************************************************************
              	
              	; ========= c! xmacro =========
8608:         	def_63_21:
8608: CDAC85  	    call compileExecutableCopySelf
860B:         	start_63_21:
860B: 01      	    db end_63_21-start_63_21-1
860C: 73      			ld 		(hl),e
860D:         	end_63_21:
860D: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= c@ xmacro =========
860E:         	def_63_40:
860E: CDAC85  	    call compileExecutableCopySelf
8611:         	start_63_40:
8611: 03      	    db end_63_40-start_63_40-1
8612: 6E      			ld 		l,(hl)
8613: 2600    			ld 		h,0
8615:         	end_63_40:
8615: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= p@ xmacro =========
8616:         	def_70_40:
8616: CDAC85  	    call compileExecutableCopySelf
8619:         	start_70_40:
8619: 04      	    db end_70_40-start_70_40-1
861A: ED68    			in 		l,(c)
861C: 2600    			ld 		h,0
861E:         	end_70_40:
861E: C9      	    ret
              	
              	; ***************************************************************************************
              	
              	; ========= p! macro =========
861F:         	def_70_21:
861F: CDAB85  	    call compileCopySelf
8622:         	start_70_21:
8622: 02      	    db end_70_21-start_70_21-1
8623: ED69    			out 	(c),l
8625:         	end_70_21:
8625: C9      	    ret
              			
8626:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
8626: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
862A: 00000000	
862E: 0C1E1E0C	
8632: 0C000C00	
8636: 36360000	
863A: 00000000	
863E: 36367F36	
8642: 7F363600	
8646: 183E603C	
864A: 067C1800	
864E: 0063660C	
8652: 18336300	
8656: 1C361C3B	
865A: 6E663B00	
865E: 30306000	
8662: 00000000	
8666: 0C183030	
866A: 30180C00	
866E: 30180C0C	
8672: 0C183000	
8676: 00331E7F	
867A: 1E330000	
867E: 0018187E	
8682: 18180000	
8686: 00000000	
868A: 00181830	
868E: 0000007E	
8692: 00000000	
8696: 00000000	
869A: 00181800	
869E: 03060C18	
86A2: 30604000	
86A6: 3E63676F	
86AA: 7B733E00	
86AE: 18381818	
86B2: 18187E00	
86B6: 3C66061C	
86BA: 30667E00	
86BE: 3C66061C	
86C2: 06663C00	
86C6: 0E1E3666	
86CA: 7F060F00	
86CE: 7E607C06	
86D2: 06663C00	
86D6: 1C30607C	
86DA: 66663C00	
86DE: 7E66060C	
86E2: 18181800	
86E6: 3C66663C	
86EA: 66663C00	
86EE: 3C66663E	
86F2: 060C3800	
86F6: 00181800	
86FA: 00181800	
86FE: 00181800	
8702: 00181830	
8706: 0C183060	
870A: 30180C00	
870E: 00007E00	
8712: 007E0000	
8716: 30180C06	
871A: 0C183000	
871E: 3C66060C	
8722: 18001800	
8726: 3E636F6F	
872A: 6F603C00	
872E: 183C6666	
8732: 7E666600	
8736: 7E33333E	
873A: 33337E00	
873E: 1E336060	
8742: 60331E00	
8746: 7C363333	
874A: 33367C00	
874E: 7F31343C	
8752: 34317F00	
8756: 7F31343C	
875A: 34307800	
875E: 1E336060	
8762: 67331F00	
8766: 6666667E	
876A: 66666600	
876E: 3C181818	
8772: 18183C00	
8776: 0F060606	
877A: 66663C00	
877E: 7333363C	
8782: 36337300	
8786: 78303030	
878A: 31337F00	
878E: 63777F7F	
8792: 6B636300	
8796: 63737B6F	
879A: 67636300	
879E: 1C366363	
87A2: 63361C00	
87A6: 7E33333E	
87AA: 30307800	
87AE: 3C666666	
87B2: 6E3C0E00	
87B6: 7E33333E	
87BA: 36337300	
87BE: 3C667038	
87C2: 0E663C00	
87C6: 7E5A1818	
87CA: 18183C00	
87CE: 66666666	
87D2: 66667E00	
87D6: 66666666	
87DA: 663C1800	
87DE: 6363636B	
87E2: 7F776300	
87E6: 6363361C	
87EA: 1C366300	
87EE: 6666663C	
87F2: 18183C00	
87F6: 7F63460C	
87FA: 19337F00	
87FE: 3C303030	
8802: 30303C00	
8806: 6030180C	
880A: 06030100	
880E: 3C0C0C0C	
8812: 0C0C3C00	
8816: 081C3663	
881A: 00000000	
881E: 00000000	
8822: 0000007F	
8826: 18180C00	
882A: 00000000	
882E: 00003C06	
8832: 3E663B00	
8836: 7030303E	
883A: 33336E00	
883E: 00003C66	
8842: 60663C00	
8846: 0E06063E	
884A: 66663B00	
884E: 00003C66	
8852: 7E603C00	
8856: 1C363078	
885A: 30307800	
885E: 00003B66	
8862: 663E067C	
8866: 7030363B	
886A: 33337300	
886E: 18003818	
8872: 18183C00	
8876: 06000606	
887A: 0666663C	
887E: 70303336	
8882: 3C367300	
8886: 38181818	
888A: 18183C00	
888E: 0000667F	
8892: 7F6B6300	
8896: 00007C66	
889A: 66666600	
889E: 00003C66	
88A2: 66663C00	
88A6: 00006E33	
88AA: 333E3078	
88AE: 00003B66	
88B2: 663E060F	
88B6: 00006E3B	
88BA: 33307800	
88BE: 00003E60	
88C2: 3C067C00	
88C6: 08183E18	
88CA: 181A0C00	
88CE: 00006666	
88D2: 66663B00	
88D6: 00006666	
88DA: 663C1800	
88DE: 0000636B	
88E2: 7F7F3600	
88E6: 00006336	
88EA: 1C366300	
88EE: 00006666	
88F2: 663E067C	
88F6: 00007E4C	
88FA: 18327E00	
88FE: 0E181870	
8902: 18180E00	
8906: 0C0C0C00	
890A: 0C0C0C00	
890E: 7018180E	
8912: 18187000	
8916: 3B6E0000	
891A: 00000000	
891E: 00...   	
              	
              			include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
8926:         	SystemInformation:
              	
8926:         	Here:												; +0 	Here 
8926: 5889    			dw 		FreeMemory
8928:         	HerePage: 											; +2	Here.Page
8928: 2A00    			db 		FirstCodePage,0
892A:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
892A: 2C000000			db 		FirstCodePage+2,0,0,0
892E:         	DisplayInfo: 										; +8 	Display information
892E: 32890000			dw 		DisplayInformation,0		
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
8932:         	DisplayInformation:
              	
8932:         	SIScreenWidth: 										; +0 	screen width
8932: 00000000			db 		0,0,0,0	
8936:         	SIScreenHeight:										; +4 	screen height
8936: 00000000			db 		0,0,0,0
893A:         	SIScreenSize:										; +8 	char size of screen
893A: 00000000			dw 		0,0		
893E:         	SIScreenMode:										; +12 	current mode
893E: 00000000			db 		0,0,0,0
8942:         	SIFontBase:											; font in use
8942: 2686    			dw 		AlternateFont
8944:         	SIScreenDriver:										; Screen Driver
8944: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
8946:         	__PAGEStackPointer: 								; stack used for switching pages
8946: 0000    			dw 		0
8948:         	__PAGEStackBase:
8948: FFFFFFFF			ds 		16
894C: FF...   	
              	
              	
8958:         	FreeMemory:		
8958: FFFFFFFF			org 	$C000
895C: FF...   	
              			include	"temp/__dictionary.asm"
              	; ----------------------------------------
C000: 06      	    db    6
C001: 2A      	    db    FirstCodePage
C002: EA85    	    dw    def_21
C004: 01      	    db    1
C005: 21      	    db    "!"
              	; ----------------------------------------
C006: 06      	    db    6
C007: 2A      	    db    FirstCodePage
C008: C184    	    dw    def_2a
C00A: 01      	    db    1
C00B: 2A      	    db    "*"
              	; ----------------------------------------
C00C: 06      	    db    6
C00D: 2A      	    db    FirstCodePage
C00E: D184    	    dw    def_2b
C010: 01      	    db    1
C011: 2B      	    db    "+"
              	; ----------------------------------------
C012: 07      	    db    7
C013: 2A      	    db    FirstCodePage
C014: FC85    	    dw    def_2b_21
C016: 02      	    db    2
C017: 2B21    	    db    "+!"
              	; ----------------------------------------
C019: 07      	    db    7
C01A: 2A      	    db    FirstCodePage
C01B: 1584    	    dw    def_2b_2b
C01D: 02      	    db    2
C01E: 2B2B    	    db    "++"
              	; ----------------------------------------
C020: 08      	    db    8
C021: 2A      	    db    FirstCodePage
C022: 1B84    	    dw    def_2b_2b_2b
C024: 03      	    db    3
C025: 2B2B2B  	    db    "+++"
              	; ----------------------------------------
C028: 06      	    db    6
C029: 2A      	    db    FirstCodePage
C02A: 4D85    	    dw    def_2c
C02C: 01      	    db    1
C02D: 2C      	    db    ","
              	; ----------------------------------------
C02E: 06      	    db    6
C02F: 2A      	    db    FirstCodePage
C030: B784    	    dw    def_2d
C032: 01      	    db    1
C033: 2D      	    db    "-"
              	; ----------------------------------------
C034: 07      	    db    7
C035: 2A      	    db    FirstCodePage
C036: 0884    	    dw    def_2d_2d
C038: 02      	    db    2
C039: 2D2D    	    db    "--"
              	; ----------------------------------------
C03B: 08      	    db    8
C03C: 2A      	    db    FirstCodePage
C03D: 0E84    	    dw    def_2d_2d_2d
C03F: 03      	    db    3
C040: 2D2D2D  	    db    "---"
              	; ----------------------------------------
C043: 06      	    db    6
C044: 2A      	    db    FirstCodePage
C045: C784    	    dw    def_2f
C047: 01      	    db    1
C048: 2F      	    db    "/"
              	; ----------------------------------------
C049: 07      	    db    7
C04A: 2A      	    db    FirstCodePage
C04B: 2284    	    dw    def_30_2d
C04D: 02      	    db    2
C04E: 302D    	    db    "0-"
              	; ----------------------------------------
C050: 07      	    db    7
C051: 2A      	    db    FirstCodePage
C052: 2D84    	    dw    def_30_3c
C054: 02      	    db    2
C055: 303C    	    db    "0<"
              	; ----------------------------------------
C057: 07      	    db    7
C058: 2A      	    db    FirstCodePage
C059: 3884    	    dw    def_30_3d
C05B: 02      	    db    2
C05C: 303D    	    db    "0="
              	; ----------------------------------------
C05E: 08      	    db    8
C05F: 2A      	    db    FirstCodePage
C060: 5884    	    dw    def_31_36_2a
C062: 03      	    db    3
C063: 31362A  	    db    "16*"
              	; ----------------------------------------
C066: 07      	    db    7
C067: 2A      	    db    FirstCodePage
C068: 4384    	    dw    def_32_2a
C06A: 02      	    db    2
C06B: 322A    	    db    "2*"
              	; ----------------------------------------
C06D: 07      	    db    7
C06E: 2A      	    db    FirstCodePage
C06F: 6184    	    dw    def_32_2f
C071: 02      	    db    2
C072: 322F    	    db    "2/"
              	; ----------------------------------------
C074: 07      	    db    7
C075: 2A      	    db    FirstCodePage
C076: 4984    	    dw    def_34_2a
C078: 02      	    db    2
C079: 342A    	    db    "4*"
              	; ----------------------------------------
C07B: 07      	    db    7
C07C: 2A      	    db    FirstCodePage
C07D: 6A84    	    dw    def_34_2f
C07F: 02      	    db    2
C080: 342F    	    db    "4/"
              	; ----------------------------------------
C082: 07      	    db    7
C083: 2A      	    db    FirstCodePage
C084: 5084    	    dw    def_38_2a
C086: 02      	    db    2
C087: 382A    	    db    "8*"
              	; ----------------------------------------
C089: 06      	    db    6
C08A: 2A      	    db    FirstCodePage
C08B: 5385    	    dw    def_3b
C08D: 01      	    db    1
C08E: 3B      	    db    ";"
              	; ----------------------------------------
C08F: 06      	    db    6
C090: 2A      	    db    FirstCodePage
C091: 9184    	    dw    def_3c
C093: 01      	    db    1
C094: 3C      	    db    "<"
              	; ----------------------------------------
C095: 06      	    db    6
C096: 2A      	    db    FirstCodePage
C097: A984    	    dw    def_3d
C099: 01      	    db    1
C09A: 3D      	    db    "="
              	; ----------------------------------------
C09B: 06      	    db    6
C09C: 2A      	    db    FirstCodePage
C09D: F385    	    dw    def_40
C09F: 01      	    db    1
C0A0: 40      	    db    "@"
              	; ----------------------------------------
C0A1: 08      	    db    8
C0A2: 2A      	    db    FirstCodePage
C0A3: C085    	    dw    def_61_3e_62
C0A5: 03      	    db    3
C0A6: 613E62  	    db    "a>b"
              	; ----------------------------------------
C0A9: 08      	    db    8
C0AA: 2A      	    db    FirstCodePage
C0AB: C785    	    dw    def_61_3e_63
C0AD: 03      	    db    3
C0AE: 613E63  	    db    "a>c"
              	; ----------------------------------------
C0B1: 08      	    db    8
C0B2: 2A      	    db    FirstCodePage
C0B3: 0B85    	    dw    def_61_3e_72
C0B5: 03      	    db    3
C0B6: 613E72  	    db    "a>r"
              	; ----------------------------------------
C0B9: 09      	    db    9
C0BA: 2A      	    db    FirstCodePage
C0BB: 2F85    	    dw    def_61_62_3e_72
C0BD: 04      	    db    4
C0BE: 61623E72	    db    "ab>r"
              	; ----------------------------------------
C0C2: 0A      	    db    10
C0C3: 2A      	    db    FirstCodePage
C0C4: 3D85    	    dw    def_61_62_63_3e_72
C0C6: 05      	    db    5
C0C7: 6162633E	    db    "abc>r"
C0CB: 72      	
              	; ----------------------------------------
C0CC: 08      	    db    8
C0CD: 2A      	    db    FirstCodePage
C0CE: 7784    	    dw    def_61_62_73
C0D0: 03      	    db    3
C0D1: 616273  	    db    "abs"
              	; ----------------------------------------
C0D4: 08      	    db    8
C0D5: 2A      	    db    FirstCodePage
C0D6: D784    	    dw    def_61_6e_64
C0D8: 03      	    db    3
C0D9: 616E64  	    db    "and"
              	; ----------------------------------------
C0DC: 08      	    db    8
C0DD: 2A      	    db    FirstCodePage
C0DE: CE85    	    dw    def_62_3e_61
C0E0: 03      	    db    3
C0E1: 623E61  	    db    "b>a"
              	; ----------------------------------------
C0E4: 08      	    db    8
C0E5: 2A      	    db    FirstCodePage
C0E6: D585    	    dw    def_62_3e_63
C0E8: 03      	    db    3
C0E9: 623E63  	    db    "b>c"
              	; ----------------------------------------
C0EC: 08      	    db    8
C0ED: 2A      	    db    FirstCodePage
C0EE: 1785    	    dw    def_62_3e_72
C0F0: 03      	    db    3
C0F1: 623E72  	    db    "b>r"
              	; ----------------------------------------
C0F4: 0A      	    db    10
C0F5: 2A      	    db    FirstCodePage
C0F6: 8084    	    dw    def_62_73_77_61_70
C0F8: 05      	    db    5
C0F9: 62737761	    db    "bswap"
C0FD: 70      	
              	; ----------------------------------------
C0FE: 07      	    db    7
C0FF: 2A      	    db    FirstCodePage
C100: 0886    	    dw    def_63_21
C102: 02      	    db    2
C103: 6321    	    db    "c!"
              	; ----------------------------------------
C105: 07      	    db    7
C106: 2A      	    db    FirstCodePage
C107: 5985    	    dw    def_63_2c
C109: 02      	    db    2
C10A: 632C    	    db    "c,"
              	; ----------------------------------------
C10C: 08      	    db    8
C10D: 2A      	    db    FirstCodePage
C10E: DC85    	    dw    def_63_3e_61
C110: 03      	    db    3
C111: 633E61  	    db    "c>a"
              	; ----------------------------------------
C114: 08      	    db    8
C115: 2A      	    db    FirstCodePage
C116: E385    	    dw    def_63_3e_62
C118: 03      	    db    3
C119: 633E62  	    db    "c>b"
              	; ----------------------------------------
C11C: 08      	    db    8
C11D: 2A      	    db    FirstCodePage
C11E: 2385    	    dw    def_63_3e_72
C120: 03      	    db    3
C121: 633E72  	    db    "c>r"
              	; ----------------------------------------
C124: 07      	    db    7
C125: 2A      	    db    FirstCodePage
C126: 0E86    	    dw    def_63_40
C128: 02      	    db    2
C129: 6340    	    db    "c@"
              	; ----------------------------------------
C12B: 12      	    db    18
C12C: 2A      	    db    FirstCodePage
C12D: F183    	    dw    def_63_6f_6e_73_6f_6c_65_2e_63_68_61_72_21
C12F: 0D      	    db    13
C130: 636F6E73	    db    "console.char!"
C134: 6F6C652E	
C138: 63686172	
C13C: 21      	
              	; ----------------------------------------
C13D: 11      	    db    17
C13E: 2A      	    db    FirstCodePage
C13F: F783    	    dw    def_63_6f_6e_73_6f_6c_65_2e_68_65_78_21
C141: 0C      	    db    12
C142: 636F6E73	    db    "console.hex!"
C146: 6F6C652E	
C14A: 68657821	
              	; ----------------------------------------
C14E: 12      	    db    18
C14F: 2A      	    db    FirstCodePage
C150: FD83    	    dw    def_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79
C152: 0D      	    db    13
C153: 636F6E73	    db    "console.inkey"
C157: 6F6C652E	
C15B: 696E6B65	
C15F: 79      	
              	; ----------------------------------------
C160: 14      	    db    20
C161: 2A      	    db    FirstCodePage
C162: EB83    	    dw    def_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65
C164: 0F      	    db    15
C165: 636F6E73	    db    "console.setmode"
C169: 6F6C652E	
C16D: 7365746D	
C171: 6F6465  	
              	; ----------------------------------------
C174: 09      	    db    9
C175: 2A      	    db    FirstCodePage
C176: 6085    	    dw    def_63_6f_70_79
C178: 04      	    db    4
C179: 636F7079	    db    "copy"
              	; ----------------------------------------
C17D: 09      	    db    9
C17E: 2A      	    db    FirstCodePage
C17F: 8085    	    dw    def_66_69_6c_6c
C181: 04      	    db    4
C182: 66696C6C	    db    "fill"
              	; ----------------------------------------
C186: 09      	    db    9
C187: 2A      	    db    FirstCodePage
C188: 9385    	    dw    def_68_61_6c_74
C18A: 04      	    db    4
C18B: 68616C74	    db    "halt"
              	; ----------------------------------------
C18F: 08      	    db    8
C190: 2A      	    db    FirstCodePage
C191: E184    	    dw    def_6d_6f_64
C193: 03      	    db    3
C194: 6D6F64  	    db    "mod"
              	; ----------------------------------------
C197: 08      	    db    8
C198: 2A      	    db    FirstCodePage
C199: 8884    	    dw    def_6e_6f_74
C19B: 03      	    db    3
C19C: 6E6F74  	    db    "not"
              	; ----------------------------------------
C19F: 07      	    db    7
C1A0: 2A      	    db    FirstCodePage
C1A1: EA84    	    dw    def_6f_72
C1A3: 02      	    db    2
C1A4: 6F72    	    db    "or"
              	; ----------------------------------------
C1A6: 07      	    db    7
C1A7: 2A      	    db    FirstCodePage
C1A8: 1F86    	    dw    def_70_21
C1AA: 02      	    db    2
C1AB: 7021    	    db    "p!"
              	; ----------------------------------------
C1AD: 07      	    db    7
C1AE: 2A      	    db    FirstCodePage
C1AF: 1686    	    dw    def_70_40
C1B1: 02      	    db    2
C1B2: 7040    	    db    "p@"
              	; ----------------------------------------
C1B4: 08      	    db    8
C1B5: 2A      	    db    FirstCodePage
C1B6: 0485    	    dw    def_70_6f_70
C1B8: 03      	    db    3
C1B9: 706F70  	    db    "pop"
              	; ----------------------------------------
C1BC: 09      	    db    9
C1BD: 2A      	    db    FirstCodePage
C1BE: FE84    	    dw    def_70_75_73_68
C1C0: 04      	    db    4
C1C1: 70757368	    db    "push"
              	; ----------------------------------------
C1C5: 08      	    db    8
C1C6: 2A      	    db    FirstCodePage
C1C7: 1185    	    dw    def_72_3e_61
C1C9: 03      	    db    3
C1CA: 723E61  	    db    "r>a"
              	; ----------------------------------------
C1CD: 09      	    db    9
C1CE: 2A      	    db    FirstCodePage
C1CF: 3685    	    dw    def_72_3e_61_62
C1D1: 04      	    db    4
C1D2: 723E6162	    db    "r>ab"
              	; ----------------------------------------
C1D6: 0A      	    db    10
C1D7: 2A      	    db    FirstCodePage
C1D8: 4585    	    dw    def_72_3e_61_62_63
C1DA: 05      	    db    5
C1DB: 723E6162	    db    "r>abc"
C1DF: 63      	
              	; ----------------------------------------
C1E0: 08      	    db    8
C1E1: 2A      	    db    FirstCodePage
C1E2: 1D85    	    dw    def_72_3e_62
C1E4: 03      	    db    3
C1E5: 723E62  	    db    "r>b"
              	; ----------------------------------------
C1E8: 08      	    db    8
C1E9: 2A      	    db    FirstCodePage
C1EA: 2985    	    dw    def_72_3e_63
C1EC: 03      	    db    3
C1ED: 723E63  	    db    "r>c"
              	; ----------------------------------------
C1F0: 09      	    db    9
C1F1: 2A      	    db    FirstCodePage
C1F2: BA85    	    dw    def_73_77_61_70
C1F4: 04      	    db    4
C1F5: 73776170	    db    "swap"
              	; ----------------------------------------
C1F9: 19      	    db    25
C1FA: 2A      	    db    FirstCodePage
C1FB: 9A85    	    dw    def_73_79_73_2e_73_74_64_68_65_61_64_65_72_72_6f_75_74_69_6e_65
C1FD: 14      	    db    20
C1FE: 7379732E	    db    "sys.stdheaderroutine"
C202: 73746468	
C206: 65616465	
C20A: 72726F75	
C20E: 74696E65	
              	; ----------------------------------------
C212: 18      	    db    24
C213: 2A      	    db    FirstCodePage
C214: A885    	    dw    def_73_79_73_2e_73_74_64_6d_61_63_72_6f_72_6f_75_74_69_6e_65
C216: 13      	    db    19
C217: 7379732E	    db    "sys.stdmacroroutine"
C21B: 7374646D	
C21F: 6163726F	
C223: 726F7574	
C227: 696E65  	
              	; ----------------------------------------
C22A: 08      	    db    8
C22B: 2A      	    db    FirstCodePage
C22C: F484    	    dw    def_78_6f_72
C22E: 03      	    db    3
C22F: 786F72  	    db    "xor"
              	
C232: 00      	    db    0
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4233 = 16947

; +++ global symbols +++

AlternateFont        = $8626 = 34342          kernel.asm:56
Boot                 = $8006 = 32774          kernel.asm:32
DIVDivideMod16       = $8035 = 32821          divide.asm:18
DictionaryPage       = $0020 =    32          kernel.asm:16 (unused)
DisplayInfo          = $892E = 35118          data.asm:26 (unused)
DisplayInformation   = $8932 = 35122          data.asm:35
Div16_Loop1          = $803F = 32831          divide.asm:27
Div16_Loop2          = $8050 = 32848          divide.asm:41
Div16_NoAdd1         = $8047 = 32839          divide.asm:33
Div16_NoAdd2         = $8058 = 32856          divide.asm:47
EditBuffer           = $7B08 = 31496          kernel.asm:24 (unused)
EditPageSize         = $0200 =   512          kernel.asm:19 (unused)
FARCompileByte       = $8060 = 32864          farmemory.asm:18
FARCompileWord       = $8078 = 32888          farmemory.asm:40
FirstCodePage        = $002A =    42          kernel.asm:20
FirstSourcePage      = $0022 =    34          kernel.asm:17 (unused)
FreeMemory           = $8958 = 35160          data.asm:62
GFXInitialise48k     = $8217 = 33303          screen48k.asm:19
GFXInitialiseLayer2  = $828F = 33423          screen_layer2.asm:19
GFXInitialiseLowRes  = $8346 = 33606          screen_lores.asm:18
GFXMode              = $80D4 = 32980          graphics.asm:18
GFXPrintCharacter48k = $8243 = 33347          screen48k.asm:53
GFXPrintCharacterLayer2 = $82BF = 33471          screen_layer2.asm:55
GFXPrintCharacterLowRes = $8370 = 33648          screen_lores.asm:50
GFXWriteCharacter    = $8105 = 33029          graphics.asm:62
GFXWriteHexWord      = $8118 = 33048          graphics.asm:85
GFXWriteHexWordA     = $811A = 33050          graphics.asm:87 (unused)
Here                 = $8926 = 35110          data.asm:20
HerePage             = $8928 = 35112          data.asm:22
IOScanKeyboard       = $814A = 33098          keyboard.asm:19
L2PClear             = $8298 = 33432          screen_layer2.asm:26
L2PClearBank         = $82A7 = 33447          screen_layer2.asm:34
LowClearScreen       = $8359 = 33625          screen_lores.asm:30
MULTMultiply16       = $801B = 32795          multiply.asm:18
NextFreePage         = $892A = 35114          data.asm:24 (unused)
PAGEInitialise       = $8093 = 32915          paging.asm:18
PAGERestore          = $80BE = 32958          paging.asm:64
PAGESwitch           = $80A5 = 32933          paging.asm:36
SIFontBase           = $8942 = 35138          data.asm:45
SIScreenDriver       = $8944 = 35140          data.asm:47
SIScreenHeight       = $8936 = 35126          data.asm:39
SIScreenMode         = $893E = 35134          data.asm:43 (unused)
SIScreenSize         = $893A = 35130          data.asm:41
SIScreenWidth        = $8932 = 35122          data.asm:37
SourcePageCount      = $0004 =     4          kernel.asm:18
StackTop             = $7EFC = 32508          kernel.asm:25
SystemInformation    = $8926 = 35110          data.asm:18
__Core__Mult_Loop    = $8022 = 32802          multiply.asm:24
__Core__Mult_Shift   = $8027 = 32807          multiply.asm:28
__GFXConfigure       = $80EA = 33002          graphics.asm:37
__GFXLayer2          = $80E2 = 32994          graphics.asm:30
__GFXLowRes          = $80E7 = 32999          graphics.asm:34
__GFXWCExit          = $8113 = 33043          graphics.asm:72
__GFXWHByte          = $812C = 33068          graphics.asm:103
__GFXWHDigit         = $8142 = 33090          graphics.asm:117
__GFXWHNibble        = $8139 = 33081          graphics.asm:111
__L2Exit             = $833F = 33599          screen_layer2.asm:156
__L2Loop             = $8330 = 33584          screen_layer2.asm:143
__L2Not1             = $82DB = 33499          screen_layer2.asm:77
__L2Not2             = $82E1 = 33505          screen_layer2.asm:81
__L2Not3             = $82E7 = 33511          screen_layer2.asm:85
__L2NotCursor        = $82F2 = 33522          screen_layer2.asm:94
__L2NotSet           = $8336 = 33590          screen_layer2.asm:148
__L2Outer            = $8327 = 33575          screen_layer2.asm:137
__LPExit             = $83E4 = 33764          screen_lores.asm:143
__LowLoop            = $83D0 = 33744          screen_lores.asm:127
__LowNotLower2       = $83C5 = 33733          screen_lores.asm:119
__LowNotReverse      = $8392 = 33682          screen_lores.asm:79
__LowNotSet          = $83D6 = 33750          screen_lores.asm:132
__LowOuter           = $83C7 = 33735          screen_lores.asm:121
__PAGEStackBase      = $8948 = 35144          data.asm:58
__PAGEStackPointer   = $8946 = 35142          data.asm:56
__ZXWCCopy           = $8283 = 33411          screen48k.asm:115
__ZXWCExit           = $828A = 33418          screen48k.asm:122
___kr4               = $817B = 33147          keyboard.asm:50
__copyMacroCode      = $85B0 = 34224          __words.asm:647
__copy_exit          = $857C = 34172          __words.asm:570
__copy_gt_count      = $8579 = 34169          __words.asm:567
__cs1                = $8227 = 33319          screen48k.asm:29
__cs2                = $822F = 33327          screen48k.asm:34
__fill_loop          = $8588 = 34184          __words.asm:587
__halt_loop          = $8596 = 34198          __words.asm:604
__kr1                = $815F = 33119          keyboard.asm:33
__kr2                = $816A = 33130          keyboard.asm:39
__kr3                = $816C = 33132          keyboard.asm:42
__kr_exit            = $819B = 33179          keyboard.asm:80
__kr_keypressed      = $8195 = 33173          keyboard.asm:74
__kr_no_shift_table  = $819F = 33183          keyboard.asm:95
__kr_shift_table     = $81C7 = 33223          keyboard.asm:101
__kr_symbol_shift_table = $81C7 = 33223          keyboard.asm:102
__less_returnc       = $84A2 = 33954          __words.asm:257
__less_samesign      = $849D = 33949          __words.asm:252
__negate             = $8425 = 33829          __words.asm:95
_end                 = $C233 = 49715          kernel.asm:26 (unused)
_size                = $4233 = 16947          kernel.asm:26 (unused)
compileCallToSelf    = $859D = 34205          __words.asm:619
compileCopySelf      = $85AB = 34219          __words.asm:640
compileExecutableCopySelf = $85AC = 34220          __words.asm:642
def_21               = $85EA = 34282          __words.asm:753
def_2a               = $84C1 = 33985          __words.asm:294
def_2b               = $84D1 = 34001          __words.asm:312
def_2b_21            = $85FC = 34300          __words.asm:781
def_2b_2b            = $8415 = 33813          __words.asm:70
def_2b_2b_2b         = $841B = 33819          __words.asm:81
def_2c               = $854D = 34125          __words.asm:517
def_2d               = $84B7 = 33975          __words.asm:282
def_2d_2d            = $8408 = 33800          __words.asm:47
def_2d_2d_2d         = $840E = 33806          __words.asm:58
def_2f               = $84C7 = 33991          __words.asm:301
def_30_2d            = $8422 = 33826          __words.asm:93
def_30_3c            = $842D = 33837          __words.asm:108
def_30_3d            = $8438 = 33848          __words.asm:119
def_31_36_2a         = $8458 = 33880          __words.asm:161
def_32_2a            = $8443 = 33859          __words.asm:131
def_32_2f            = $8461 = 33889          __words.asm:175
def_34_2a            = $8449 = 33865          __words.asm:140
def_34_2f            = $846A = 33898          __words.asm:185
def_38_2a            = $8450 = 33872          __words.asm:150
def_3b               = $8553 = 34131          __words.asm:524
def_3c               = $8491 = 33937          __words.asm:243
def_3d               = $84A9 = 33961          __words.asm:267
def_40               = $85F3 = 34291          __words.asm:767
def_61_3e_62         = $85C0 = 34240          __words.asm:678
def_61_3e_63         = $85C7 = 34247          __words.asm:688
def_61_3e_72         = $850B = 34059          __words.asm:402
def_61_62_3e_72      = $852F = 34095          __words.asm:463
def_61_62_63_3e_72   = $853D = 34109          __words.asm:485
def_61_62_73         = $8477 = 33911          __words.asm:199
def_61_6e_64         = $84D7 = 34007          __words.asm:323
def_62_3e_61         = $85CE = 34254          __words.asm:700
def_62_3e_63         = $85D5 = 34261          __words.asm:710
def_62_3e_72         = $8517 = 34071          __words.asm:422
def_62_73_77_61_70   = $8480 = 33920          __words.asm:208
def_63_21            = $8608 = 34312          __words.asm:796
def_63_2c            = $8559 = 34137          __words.asm:535
def_63_3e_61         = $85DC = 34268          __words.asm:722
def_63_3e_62         = $85E3 = 34275          __words.asm:732
def_63_3e_72         = $8523 = 34083          __words.asm:442
def_63_40            = $860E = 34318          __words.asm:807
def_63_6f_6e_73_6f_6c_65_2e_63_68_61_72_21 = $83F1 = 33777          __words.asm:18
def_63_6f_6e_73_6f_6c_65_2e_68_65_78_21 = $83F7 = 33783          __words.asm:23
def_63_6f_6e_73_6f_6c_65_2e_69_6e_6b_65_79 = $83FD = 33789          __words.asm:28
def_63_6f_6e_73_6f_6c_65_2e_73_65_74_6d_6f_64_65 = $83EB = 33771          __words.asm:13
def_63_6f_70_79      = $8560 = 34144          __words.asm:543
def_66_69_6c_6c      = $8580 = 34176          __words.asm:579
def_68_61_6c_74      = $8593 = 34195          __words.asm:602
def_6d_6f_64         = $84E1 = 34017          __words.asm:336
def_6e_6f_74         = $8488 = 33928          __words.asm:221
def_6f_72            = $84EA = 34026          __words.asm:346
def_70_21            = $861F = 34335          __words.asm:831
def_70_40            = $8616 = 34326          __words.asm:819
def_70_6f_70         = $8504 = 34052          __words.asm:390
def_70_75_73_68      = $84FE = 34046          __words.asm:381
def_72_3e_61         = $8511 = 34065          __words.asm:411
def_72_3e_61_62      = $8536 = 34102          __words.asm:473
def_72_3e_61_62_63   = $8545 = 34117          __words.asm:496
def_72_3e_62         = $851D = 34077          __words.asm:431
def_72_3e_63         = $8529 = 34089          __words.asm:451
def_73_77_61_70      = $85BA = 34234          __words.asm:667
def_73_79_73_2e_73_74_64_68_65_61_64_65_72_72_6f_75_74_69_6e_65 = $859A = 34202          __words.asm:612
def_73_79_73_2e_73_74_64_6d_61_63_72_6f_72_6f_75_74_69_6e_65 = $85A8 = 34216          __words.asm:632
def_78_6f_72         = $84F4 = 34036          __words.asm:359
end_21               = $85F2 = 34290          __words.asm:761
end_2b               = $84D6 = 34006          __words.asm:317
end_2b_2b            = $841A = 33818          __words.asm:75
end_2b_2b_2b         = $8421 = 33825          __words.asm:87
end_2d_2d            = $840D = 33805          __words.asm:52
end_2d_2d_2d         = $8414 = 33812          __words.asm:64
end_31_36_2a         = $8460 = 33888          __words.asm:169
end_32_2a            = $8448 = 33864          __words.asm:136
end_32_2f            = $8469 = 33897          __words.asm:181
end_34_2a            = $844F = 33871          __words.asm:146
end_34_2f            = $8476 = 33910          __words.asm:193
end_38_2a            = $8457 = 33879          __words.asm:157
end_3b               = $8558 = 34136          __words.asm:529
end_40               = $85FB = 34299          __words.asm:775
end_61_3e_62         = $85C6 = 34246          __words.asm:684
end_61_3e_63         = $85CD = 34253          __words.asm:694
end_61_3e_72         = $8510 = 34064          __words.asm:407
end_61_62_3e_72      = $8535 = 34101          __words.asm:469
end_61_62_63_3e_72   = $8544 = 34116          __words.asm:492
end_62_3e_61         = $85D4 = 34260          __words.asm:706
end_62_3e_63         = $85DB = 34267          __words.asm:716
end_62_3e_72         = $851C = 34076          __words.asm:427
end_62_73_77_61_70   = $8487 = 33927          __words.asm:215
end_63_21            = $860D = 34317          __words.asm:801
end_63_3e_61         = $85E2 = 34274          __words.asm:728
end_63_3e_62         = $85E9 = 34281          __words.asm:738
end_63_3e_72         = $8528 = 34088          __words.asm:447
end_63_40            = $8615 = 34325          __words.asm:813
end_70_21            = $8625 = 34341          __words.asm:836
end_70_40            = $861E = 34334          __words.asm:825
end_70_6f_70         = $850A = 34058          __words.asm:396
end_70_75_73_68      = $8503 = 34051          __words.asm:386
end_72_3e_61         = $8516 = 34070          __words.asm:416
end_72_3e_61_62      = $853C = 34108          __words.asm:479
end_72_3e_61_62_63   = $854C = 34124          __words.asm:503
end_72_3e_62         = $8522 = 34082          __words.asm:436
end_72_3e_63         = $852E = 34094          __words.asm:456
end_73_77_61_70      = $85BF = 34239          __words.asm:672
start_21             = $85ED = 34285          __words.asm:755
start_2b             = $84D4 = 34004          __words.asm:314
start_2b_2b          = $8418 = 33816          __words.asm:72
start_2b_2b_2b       = $841E = 33822          __words.asm:83
start_2d_2d          = $840B = 33803          __words.asm:49
start_2d_2d_2d       = $8411 = 33809          __words.asm:60
start_31_36_2a       = $845B = 33883          __words.asm:163
start_32_2a          = $8446 = 33862          __words.asm:133
start_32_2f          = $8464 = 33892          __words.asm:177
start_34_2a          = $844C = 33868          __words.asm:142
start_34_2f          = $846D = 33901          __words.asm:187
start_38_2a          = $8453 = 33875          __words.asm:152
start_3b             = $8556 = 34134          __words.asm:526
start_40             = $85F6 = 34294          __words.asm:769
start_61_3e_62       = $85C3 = 34243          __words.asm:680
start_61_3e_63       = $85CA = 34250          __words.asm:690
start_61_3e_72       = $850E = 34062          __words.asm:404
start_61_62_3e_72    = $8532 = 34098          __words.asm:465
start_61_62_63_3e_72 = $8540 = 34112          __words.asm:487
start_62_3e_61       = $85D1 = 34257          __words.asm:702
start_62_3e_63       = $85D8 = 34264          __words.asm:712
start_62_3e_72       = $851A = 34074          __words.asm:424
start_62_73_77_61_70 = $8483 = 33923          __words.asm:210
start_63_21          = $860B = 34315          __words.asm:798
start_63_3e_61       = $85DF = 34271          __words.asm:724
start_63_3e_62       = $85E6 = 34278          __words.asm:734
start_63_3e_72       = $8526 = 34086          __words.asm:444
start_63_40          = $8611 = 34321          __words.asm:809
start_70_21          = $8622 = 34338          __words.asm:833
start_70_40          = $8619 = 34329          __words.asm:821
start_70_6f_70       = $8507 = 34055          __words.asm:392
start_70_75_73_68    = $8501 = 34049          __words.asm:383
start_72_3e_61       = $8514 = 34068          __words.asm:413
start_72_3e_61_62    = $8539 = 34105          __words.asm:475
start_72_3e_61_62_63 = $8548 = 34120          __words.asm:498
start_72_3e_62       = $8520 = 34080          __words.asm:433
start_72_3e_63       = $852C = 34092          __words.asm:453
start_73_77_61_70    = $85BD = 34237          __words.asm:669
stop                 = $8018 = 32792          kernel.asm:43


total time: 0.0082 sec.
no errors
